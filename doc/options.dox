/**
\page OPTIONS %Ipopt %Options

\tableofcontents

%Ipopt has many (maybe too many) options that can be adjusted for the
algorithm. %Options are all identified by a string name,
and their values can be of one of three types: Number (real), Integer,
or String. Number options are used for things like tolerances, integer
options are used for things like maximum number of iterations, and
string options are used for setting algorithm details, like the NLP
scaling method. %Options can be set through the code that interfaces %Ipopt
(have a look at the examples to see how this is done)
or by creating a `ipopt.opt` file in the directory you are executing %Ipopt.

The `ipopt.opt` file is read line by line and each line should contain the
option name, followed by whitespace, and then the value. Comments can be
included with the `#` symbol. For example,

    # This is a comment

    # Turn off the NLP scaling
    nlp_scaling_method none

    # Change the initial barrier parameter
    mu_init 1e-2

    # Set the max number of iterations
    max_iter 500

is a valid `ipopt.opt` file.

\section OPTIONS_AMPL Options in the AMPL Interface

To set options through AMPL, use the internal AMPL command options.
For example,
\verbatim
options ipopt_options "nlp_scaling_method=none mu_init=1e-2 max_iter=500"
\endverbatim
is a valid options command in AMPL. Further, you can always create `ipopt.opt`.
Note, the `ipopt.opt` file is given preference when setting options.
This way, you can easily override any options set in a particular executable
or AMPL model by specifying new values in `ipopt.opt`.

All %Ipopt options are also available through AMPL.
In addition, these options are available:

| Option | Description |
|:-------|:------------|
| halt_on_ampl_error | Exit with message on evaluation error |
| wantsol | solution report without -AMPL: sum of; 1 => write .sol file; 2 => print primal variable values; 4 => print dual variable values; 8 => do not print solution message |
| maxit | Synonym for \ref OPT_max_iter "max_iter" |
| outlev | Synonym for \ref OPT_print_level "print_level" |

Running the AMPL solver executable with the "-=" flag from the command prompt
prints a list of all options available in AMPL.

\section OPTIONS_REF Options Reference

A list of documented options is given next.
Options that should be modified by expert users only are marked as <em>advanced</em>.
You can print the documentation for all %Ipopt options to the console by
using the option \ref OPT_print_options_documentation "print_options_documentation"
and running %Ipopt.
If you have the AMPL solver executable, you can generate this list also
by calling the executable with flag `--print-options`.

\note Availability or default values of some options concerning the linear solver depends on the configuration used to build %Ipopt.
Use the print options documentation feature to see which options are available in a particular build of %Ipopt.

The implementation paper mentioned for some options is \cite WaecBieg06:mp.


\subsection OPT_Termination Termination

\anchor OPT_tol
<strong>tol</strong>: Desired convergence tolerance (relative).
<blockquote>
 Determines the convergence tolerance for the algorithm. The algorithm terminates successfully, if the (scaled) NLP error becomes smaller than this value, and if the (absolute) criteria according to "dual_inf_tol", "constr_viol_tol", and "compl_inf_tol" are met. This is epsilon_tol in Eqn. (6) in implementation paper. See also "acceptable_tol" as a second termination criterion. Note, some other algorithmic features also use this quantity to determine thresholds etc. The valid range for this real option is 0 < tol and its default value is 10<sup>-08</sup>.
</blockquote>

\anchor OPT_s_max
<strong>s_max</strong> (<em>advanced</em>): Scaling threshold for the NLP error.
<blockquote>
 See paragraph after Eqn. (6) in the implementation paper. The valid range for this real option is 0 < s_max and its default value is 100.
</blockquote>

\anchor OPT_max_iter
<strong>max_iter</strong>: Maximum number of iterations.
<blockquote>
 The algorithm terminates with a message if the number of iterations exceeded this number. The valid range for this integer option is 0 &le; max_iter and its default value is 3000.
</blockquote>

\anchor OPT_max_wall_time
<strong>max_wall_time</strong>: Maximum number of walltime clock seconds.
<blockquote>
 A limit on walltime clock seconds that Ipopt can use to solve one problem. If during the convergence check this limit is exceeded, Ipopt will terminate with a corresponding message. The valid range for this real option is 0 < max_wall_time and its default value is 10<sup>+20</sup>.
</blockquote>

\anchor OPT_max_cpu_time
<strong>max_cpu_time</strong>: Maximum number of CPU seconds.
<blockquote>
 A limit on CPU seconds that Ipopt can use to solve one problem. If during the convergence check this limit is exceeded, Ipopt will terminate with a corresponding message. The valid range for this real option is 0 < max_cpu_time and its default value is 10<sup>+20</sup>.
</blockquote>

\anchor OPT_dual_inf_tol
<strong>dual_inf_tol</strong>: Desired threshold for the dual infeasibility.
<blockquote>
 Absolute tolerance on the dual infeasibility. Successful termination requires that the max-norm of the (unscaled) dual infeasibility is less than this threshold. The valid range for this real option is 0 < dual_inf_tol and its default value is 1.
</blockquote>

\anchor OPT_constr_viol_tol
<strong>constr_viol_tol</strong>: Desired threshold for the constraint and variable bound violation.
<blockquote>
 Absolute tolerance on the constraint and variable bound violation. Successful termination requires that the max-norm of the (unscaled) constraint violation is less than this threshold. If option bound_relax_factor is not zero 0, then Ipopt relaxes given variable bounds. The value of constr_viol_tol is used to restrict the absolute amount of this bound relaxation.  The valid range for this real option is 0 < constr_viol_tol and its default value is 0.0001.
</blockquote>

\anchor OPT_compl_inf_tol
<strong>compl_inf_tol</strong>: Desired threshold for the complementarity conditions.
<blockquote>
 Absolute tolerance on the complementarity. Successful termination requires that the max-norm of the (unscaled) complementarity is less than this threshold. The valid range for this real option is 0 < compl_inf_tol and its default value is 0.0001.
</blockquote>

\anchor OPT_acceptable_tol
<strong>acceptable_tol</strong>: "Acceptable" convergence tolerance (relative).
<blockquote>
 Determines which (scaled) overall optimality error is considered to be "acceptable". There are two levels of termination criteria. If the usual "desired" tolerances (see tol, dual_inf_tol etc) are satisfied at an iteration, the algorithm immediately terminates with a success message. On the other hand, if the algorithm encounters "acceptable_iter" many iterations in a row that are considered "acceptable", it will terminate before the desired convergence tolerance is met. This is useful in cases where the algorithm might not be able to achieve the "desired" level of accuracy. The valid range for this real option is 0 < acceptable_tol and its default value is 10<sup>-06</sup>.
</blockquote>

\anchor OPT_acceptable_iter
<strong>acceptable_iter</strong>: Number of "acceptable" iterates before triggering termination.
<blockquote>
 If the algorithm encounters this many successive "acceptable" iterates (see "acceptable_tol"), it terminates, assuming that the problem has been solved to best possible accuracy given round-off. If it is set to zero, this heuristic is disabled. The valid range for this integer option is 0 &le; acceptable_iter and its default value is 15.
</blockquote>

\anchor OPT_acceptable_dual_inf_tol
<strong>acceptable_dual_inf_tol</strong>: "Acceptance" threshold for the dual infeasibility.
<blockquote>
 Absolute tolerance on the dual infeasibility. "Acceptable" termination requires that the (max-norm of the unscaled) dual infeasibility is less than this threshold; see also acceptable_tol. The valid range for this real option is 0 < acceptable_dual_inf_tol and its default value is 10<sup>+10</sup>.
</blockquote>

\anchor OPT_acceptable_constr_viol_tol
<strong>acceptable_constr_viol_tol</strong>: "Acceptance" threshold for the constraint violation.
<blockquote>
 Absolute tolerance on the constraint violation. "Acceptable" termination requires that the max-norm of the (unscaled) constraint violation is less than this threshold; see also acceptable_tol. The valid range for this real option is 0 < acceptable_constr_viol_tol and its default value is 0.01.
</blockquote>

\anchor OPT_acceptable_compl_inf_tol
<strong>acceptable_compl_inf_tol</strong>: "Acceptance" threshold for the complementarity conditions.
<blockquote>
 Absolute tolerance on the complementarity. "Acceptable" termination requires that the max-norm of the (unscaled) complementarity is less than this threshold; see also acceptable_tol. The valid range for this real option is 0 < acceptable_compl_inf_tol and its default value is 0.01.
</blockquote>

\anchor OPT_acceptable_obj_change_tol
<strong>acceptable_obj_change_tol</strong>: "Acceptance" stopping criterion based on objective function change.
<blockquote>
 If the relative change of the objective function (scaled by Max(1,|f(x)|)) is less than this value, this part of the acceptable tolerance termination is satisfied; see also acceptable_tol. This is useful for the quasi-Newton option, which has trouble to bring down the dual infeasibility. The valid range for this real option is 0 &le; acceptable_obj_change_tol and its default value is 10<sup>+20</sup>.
</blockquote>

\anchor OPT_diverging_iterates_tol
<strong>diverging_iterates_tol</strong>: Threshold for maximal value of primal iterates.
<blockquote>
 If any component of the primal iterates exceeded this value (in absolute terms), the optimization is aborted with the exit message that the iterates seem to be diverging. The valid range for this real option is 0 < diverging_iterates_tol and its default value is 10<sup>+20</sup>.
</blockquote>

\anchor OPT_mu_target
<strong>mu_target</strong>: Desired value of complementarity.
<blockquote>
 Usually, the barrier parameter is driven to zero and the termination test for complementarity is measured with respect to zero complementarity. However, in some cases it might be desired to have Ipopt solve barrier problem for strictly positive value of the barrier parameter. In this case, the value of "mu_target" specifies the final value of the barrier parameter, and the termination tests are then defined with respect to the barrier problem for this value of the barrier parameter. The valid range for this real option is 0 &le; mu_target and its default value is 0.
</blockquote>


\subsection OPT_Output Output

\anchor OPT_print_level
<strong>print_level</strong>: Output verbosity level.
<blockquote>
 Sets the default verbosity level for console output. The larger this value the more detailed is the output. The valid range for this integer option is 0 &le; print_level &le; 12 and its default value is 5.
</blockquote>

\anchor OPT_output_file
<strong>output_file</strong>: File name of desired output file (leave unset for no file output).
<blockquote>
 NOTE: This option only works when read from the ipopt.opt options file! An output file with this name will be written (leave unset for no file output). The verbosity level is by default set to "print_level", but can be overridden with "file_print_level". The file name is changed to use only small letters. The default value for this string option is "".

Possible values:
 - *: Any acceptable standard file name
</blockquote>

\anchor OPT_file_print_level
<strong>file_print_level</strong>: Verbosity level for output file.
<blockquote>
 NOTE: This option only works when read from the ipopt.opt options file! Determines the verbosity level for the file specified by "output_file". By default it is the same as "print_level". The valid range for this integer option is 0 &le; file_print_level &le; 12 and its default value is 5.
</blockquote>

\anchor OPT_print_user_options
<strong>print_user_options</strong>: Print all options set by the user.
<blockquote>
 If selected, the algorithm will print the list of all options set by the user including their values and whether they have been used. In some cases this information might be incorrect, due to the internal program flow. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_print_options_documentation
<strong>print_options_documentation</strong>: Switch to print all algorithmic options with some documentation before solving the optimization problem.
<blockquote>
 The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_print_timing_statistics
<strong>print_timing_statistics</strong>: Switch to print timing statistics.
<blockquote>
 If selected, the program will print the time spend for selected tasks. This implies timing_statistics=yes. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_print_options_mode
<strong>print_options_mode</strong>: format in which to print options documentation
<blockquote>
 The default value for this string option is "text".

Possible values:
 - text: Ordinary text
 - latex: LaTeX formatted
 - doxygen: Doxygen (markdown) formatted
</blockquote>

\anchor OPT_print_advanced_options
<strong>print_advanced_options</strong> (<em>advanced</em>): whether to print also advanced options
<blockquote>
 The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_print_info_string
<strong>print_info_string</strong>: Enables printing of additional info string at end of iteration output.
<blockquote>
 This string contains some insider information about the current iteration. For details, look for "Diagnostic Tags" in the Ipopt documentation. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_inf_pr_output
<strong>inf_pr_output</strong>: Determines what value is printed in the "inf_pr" output column.
<blockquote>
 Ipopt works with a reformulation of the original problem, where slacks are introduced and the problem might have been scaled. The choice "internal" prints out the constraint violation of this formulation. With "original" the true constraint violation in the original NLP is printed. The default value for this string option is "original".

Possible values:
 - internal: max-norm of violation of internal equality constraints
 - original: maximal constraint violation in original NLP
</blockquote>

\anchor OPT_print_frequency_iter
<strong>print_frequency_iter</strong>: Determines at which iteration frequency the summarizing iteration output line should be printed.
<blockquote>
 Summarizing iteration output is printed every print_frequency_iter iterations, if at least print_frequency_time seconds have passed since last output. The valid range for this integer option is 1 &le; print_frequency_iter and its default value is 1.
</blockquote>

\anchor OPT_print_frequency_time
<strong>print_frequency_time</strong>: Determines at which time frequency the summarizing iteration output line should be printed.
<blockquote>
 Summarizing iteration output is printed if at least print_frequency_time seconds have passed since last output and the iteration number is a multiple of print_frequency_iter. The valid range for this real option is 0 &le; print_frequency_time and its default value is 0.
</blockquote>


\subsection OPT_NLP NLP

\anchor OPT_nlp_lower_bound_inf
<strong>nlp_lower_bound_inf</strong>: any bound less or equal this value will be considered -inf (i.e. not lower bounded).
<blockquote>
 The valid range for this real option is unrestricted and its default value is -10<sup>+19</sup>.
</blockquote>

\anchor OPT_nlp_upper_bound_inf
<strong>nlp_upper_bound_inf</strong>: any bound greater or this value will be considered +inf (i.e. not upper bounded).
<blockquote>
 The valid range for this real option is unrestricted and its default value is 10<sup>+19</sup>.
</blockquote>

\anchor OPT_fixed_variable_treatment
<strong>fixed_variable_treatment</strong>: Determines how fixed variables should be handled.
<blockquote>
 The main difference between those options is that the starting point in the "make_constraint" case still has the fixed variables at their given values, whereas in the case "make_parameter(_nodual)" the functions are always evaluated with the fixed values for those variables.  Also, for "relax_bounds", the fixing bound constraints are relaxed (according to" bound_relax_factor"). For all but "make_parameter_nodual", bound multipliers are computed for the fixed variables. The default value for this string option is "make_parameter".

Possible values:
 - make_parameter: Remove fixed variable from optimization variables
 - make_parameter_nodual: Remove fixed variable from optimization variables and do not compute bound multipliers for fixed variables
 - make_constraint: Add equality constraints fixing variables
 - relax_bounds: Relax fixing bound constraints
</blockquote>

\anchor OPT_dependency_detector
<strong>dependency_detector</strong> (<em>advanced</em>): Indicates which linear solver should be used to detect linearly dependent equality constraints.
<blockquote>
 This is experimental and does not work well. The default value for this string option is "none".

Possible values:
 - none: don't check; no extra work at beginning
 - mumps: use MUMPS
 - wsmp: use WSMP
 - ma28: use MA28
</blockquote>

\anchor OPT_dependency_detection_with_rhs
<strong>dependency_detection_with_rhs</strong> (<em>advanced</em>): Indicates if the right hand sides of the constraints should be considered in addition to gradients during dependency detection
<blockquote>
 The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_num_linear_variables
<strong>num_linear_variables</strong> (<em>advanced</em>): Number of linear variables
<blockquote>
 When the Hessian is approximated, it is assumed that the first num_linear_variables variables are linear. The Hessian is then not approximated in this space. If the get_number_of_nonlinear_variables method in the TNLP is implemented, this option is ignored. The valid range for this integer option is 0 &le; num_linear_variables and its default value is 0.
</blockquote>

\anchor OPT_jacobian_approximation
<strong>jacobian_approximation</strong> (<em>advanced</em>): Specifies technique to compute constraint Jacobian
<blockquote>
 The default value for this string option is "exact".

Possible values:
 - exact: user-provided derivatives
 - finite-difference-values: user-provided structure, values by finite differences
</blockquote>

\anchor OPT_gradient_approximation
<strong>gradient_approximation</strong> (<em>advanced</em>): Specifies technique to compute objective Gradient
<blockquote>
 The default value for this string option is "exact".

Possible values:
 - exact: user-provided gradient
 - finite-difference-values: values by finite differences
</blockquote>

\anchor OPT_findiff_perturbation
<strong>findiff_perturbation</strong> (<em>advanced</em>): Size of the finite difference perturbation for derivative approximation.
<blockquote>
 This determines the relative perturbation of the variable entries. The valid range for this real option is 0 < findiff_perturbation and its default value is 10<sup>-07</sup>.
</blockquote>

\anchor OPT_kappa_d
<strong>kappa_d</strong> (<em>advanced</em>): Weight for linear damping term (to handle one-sided bounds).
<blockquote>
 See Section 3.7 in implementation paper. The valid range for this real option is 0 &le; kappa_d and its default value is 10<sup>-05</sup>.
</blockquote>

\anchor OPT_bound_relax_factor
<strong>bound_relax_factor</strong>: Factor for initial relaxation of the bounds.
<blockquote>
 Before start of the optimization, the bounds given by the user are relaxed. This option sets the factor for this relaxation. Additional, the constraint violation tolerance constr_viol_tol is used to bound the relaxation by an absolute value. If it is set to zero, then then bounds relaxation is disabled. See Eqn.(35) in implementation paper. Note that the constraint violation reported by Ipopt at the end of the solution process does not include violations of the original (non-relaxed) variable bounds. See also option honor_original_bounds. The valid range for this real option is 0 &le; bound_relax_factor and its default value is 10<sup>-08</sup>.
</blockquote>

\anchor OPT_honor_original_bounds
<strong>honor_original_bounds</strong>: Indicates whether final points should be projected into original bounds.
<blockquote>
 Ipopt might relax the bounds during the optimization (see, e.g., option "bound_relax_factor"). This option determines whether the final point should be projected back into the user-provide original bounds after the optimization. Note that violations of constraints and complementarity reported by Ipopt at the end of the solution process are for the non-projected point. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_check_derivatives_for_naninf
<strong>check_derivatives_for_naninf</strong>: Indicates whether it is desired to check for Nan/Inf in derivative matrices
<blockquote>
 Activating this option will cause an error if an invalid number is detected in the constraint Jacobians or the Lagrangian Hessian. If this is not activated, the test is skipped, and the algorithm might proceed with invalid numbers and fail. If test is activated and an invalid number is detected, the matrix is written to output with print_level corresponding to J_MORE_DETAILED; so beware of large output! The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_grad_f_constant
<strong>grad_f_constant</strong>: Indicates whether to assume that the objective function is linear
<blockquote>
 Activating this option will cause Ipopt to ask for the Gradient of the objective function only once from the NLP and reuse this information later. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_jac_c_constant
<strong>jac_c_constant</strong>: Indicates whether to assume that all equality constraints are linear
<blockquote>
 Activating this option will cause Ipopt to ask for the Jacobian of the equality constraints only once from the NLP and reuse this information later. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_jac_d_constant
<strong>jac_d_constant</strong>: Indicates whether to assume that all inequality constraints are linear
<blockquote>
 Activating this option will cause Ipopt to ask for the Jacobian of the inequality constraints only once from the NLP and reuse this information later. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_hessian_constant
<strong>hessian_constant</strong>: Indicates whether to assume the problem is a QP (quadratic objective, linear constraints)
<blockquote>
 Activating this option will cause Ipopt to ask for the Hessian of the Lagrangian function only once from the NLP and reuse this information later. The default value for this string option is "no".

Possible values: yes, no
</blockquote>


\subsection OPT_NLP_Scaling NLP Scaling

\anchor OPT_nlp_scaling_method
<strong>nlp_scaling_method</strong>: Select the technique used for scaling the NLP.
<blockquote>
 Selects the technique used for scaling the problem internally before it is solved. For user-scaling, the parameters come from the NLP. If you are using AMPL, they can be specified through suffixes ("scaling_factor") The default value for this string option is "gradient-based".

Possible values:
 - none: no problem scaling will be performed
 - user-scaling: scaling parameters will come from the user
 - gradient-based: scale the problem so the maximum gradient at the starting point is nlp_scaling_max_gradient
 - equilibration-based: scale the problem so that first derivatives are of order 1 at random points (uses Harwell routine MC19)
</blockquote>

\anchor OPT_obj_scaling_factor
<strong>obj_scaling_factor</strong>: Scaling factor for the objective function.
<blockquote>
 This option sets a scaling factor for the objective function. The scaling is seen internally by Ipopt but the unscaled objective is reported in the console output. If additional scaling parameters are computed (e.g. user-scaling or gradient-based), both factors are multiplied. If this value is chosen to be negative, Ipopt will maximize the objective function instead of minimizing it. The valid range for this real option is unrestricted and its default value is 1.
</blockquote>

\anchor OPT_nlp_scaling_max_gradient
<strong>nlp_scaling_max_gradient</strong>: Maximum gradient after NLP scaling.
<blockquote>
 This is the gradient scaling cut-off. If the maximum gradient is above this value, then gradient based scaling will be performed. Scaling parameters are calculated to scale the maximum gradient back to this value. (This is g_max in Section 3.8 of the implementation paper.) Note: This option is only used if "nlp_scaling_method" is chosen as "gradient-based". The valid range for this real option is 0 < nlp_scaling_max_gradient and its default value is 100.
</blockquote>

\anchor OPT_nlp_scaling_obj_target_gradient
<strong>nlp_scaling_obj_target_gradient</strong> (<em>advanced</em>): Target value for objective function gradient size.
<blockquote>
 If a positive number is chosen, the scaling factor for the objective function is computed so that the gradient has the max norm of the given size at the starting point. This overrides nlp_scaling_max_gradient for the objective function. The valid range for this real option is 0 &le; nlp_scaling_obj_target_gradient and its default value is 0.
</blockquote>

\anchor OPT_nlp_scaling_constr_target_gradient
<strong>nlp_scaling_constr_target_gradient</strong> (<em>advanced</em>): Target value for constraint function gradient size.
<blockquote>
 If a positive number is chosen, the scaling factors for the constraint functions are computed so that the gradient has the max norm of the given size at the starting point. This overrides nlp_scaling_max_gradient for the constraint functions. The valid range for this real option is 0 &le; nlp_scaling_constr_target_gradient and its default value is 0.
</blockquote>

\anchor OPT_nlp_scaling_min_value
<strong>nlp_scaling_min_value</strong>: Minimum value of gradient-based scaling values.
<blockquote>
 This is the lower bound for the scaling factors computed by gradient-based scaling method. If some derivatives of some functions are huge, the scaling factors will otherwise become very small, and the (unscaled) final constraint violation, for example, might then be significant. Note: This option is only used if "nlp_scaling_method" is chosen as "gradient-based". The valid range for this real option is 0 &le; nlp_scaling_min_value and its default value is 10<sup>-08</sup>.
</blockquote>


\subsection OPT_Initialization Initialization

\anchor OPT_bound_push
<strong>bound_push</strong>: Desired minimum absolute distance from the initial point to bound.
<blockquote>
 Determines how much the initial point might have to be modified in order to be sufficiently inside the bounds (together with "bound_frac"). (This is kappa_1 in Section 3.6 of implementation paper.) The valid range for this real option is 0 < bound_push and its default value is 0.01.
</blockquote>

\anchor OPT_bound_frac
<strong>bound_frac</strong>: Desired minimum relative distance from the initial point to bound.
<blockquote>
 Determines how much the initial point might have to be modified in order to be sufficiently inside the bounds (together with "bound_push"). (This is kappa_2 in Section 3.6 of implementation paper.) The valid range for this real option is 0 < bound_frac &le; 0.5 and its default value is 0.01.
</blockquote>

\anchor OPT_slack_bound_push
<strong>slack_bound_push</strong>: Desired minimum absolute distance from the initial slack to bound.
<blockquote>
 Determines how much the initial slack variables might have to be modified in order to be sufficiently inside the inequality bounds (together with "slack_bound_frac"). (This is kappa_1 in Section 3.6 of implementation paper.) The valid range for this real option is 0 < slack_bound_push and its default value is 0.01.
</blockquote>

\anchor OPT_slack_bound_frac
<strong>slack_bound_frac</strong>: Desired minimum relative distance from the initial slack to bound.
<blockquote>
 Determines how much the initial slack variables might have to be modified in order to be sufficiently inside the inequality bounds (together with "slack_bound_push"). (This is kappa_2 in Section 3.6 of implementation paper.) The valid range for this real option is 0 < slack_bound_frac &le; 0.5 and its default value is 0.01.
</blockquote>

\anchor OPT_constr_mult_init_max
<strong>constr_mult_init_max</strong>: Maximum allowed least-square guess of constraint multipliers.
<blockquote>
 Determines how large the initial least-square guesses of the constraint multipliers are allowed to be (in max-norm). If the guess is larger than this value, it is discarded and all constraint multipliers are set to zero. This options is also used when initializing the restoration phase. By default, "resto.constr_mult_init_max" (the one used in RestoIterateInitializer) is set to zero. The valid range for this real option is 0 &le; constr_mult_init_max and its default value is 1000.
</blockquote>

\anchor OPT_bound_mult_init_val
<strong>bound_mult_init_val</strong>: Initial value for the bound multipliers.
<blockquote>
 All dual variables corresponding to bound constraints are initialized to this value. The valid range for this real option is 0 < bound_mult_init_val and its default value is 1.
</blockquote>

\anchor OPT_bound_mult_init_method
<strong>bound_mult_init_method</strong>: Initialization method for bound multipliers
<blockquote>
 This option defines how the iterates for the bound multipliers are initialized. If "constant" is chosen, then all bound multipliers are initialized to the value of "bound_mult_init_val". If "mu-based" is chosen, then each value is initialized to the the value of "mu_init" divided by the corresponding slack variable. This latter option might be useful if the starting point is close to the optimal solution. The default value for this string option is "constant".

Possible values:
 - constant: set all bound multipliers to the value of bound_mult_init_val
 - mu-based: initialize to mu_init/x_slack
</blockquote>

\anchor OPT_least_square_init_primal
<strong>least_square_init_primal</strong>: Least square initialization of the primal variables
<blockquote>
 If set to yes, Ipopt ignores the user provided point and solves a least square problem for the primal variables (x and s) to fit the linearized equality and inequality constraints.This might be useful if the user doesn't know anything about the starting point, or for solving an LP or QP. The default value for this string option is "no".

Possible values:
 - no: take user-provided point
 - yes: overwrite user-provided point with least-square estimates
</blockquote>

\anchor OPT_least_square_init_duals
<strong>least_square_init_duals</strong>: Least square initialization of all dual variables
<blockquote>
 If set to yes, Ipopt tries to compute least-square multipliers (considering ALL dual variables). If successful, the bound multipliers are possibly corrected to be at least bound_mult_init_val. This might be useful if the user doesn't know anything about the starting point, or for solving an LP or QP. This overwrites option "bound_mult_init_method". The default value for this string option is "no".

Possible values:
 - no: use bound_mult_init_val and least-square equality constraint multipliers
 - yes: overwrite user-provided point with least-square estimates
</blockquote>


\subsection OPT_Warm_Start Warm Start

\anchor OPT_warm_start_init_point
<strong>warm_start_init_point</strong>: Warm-start for initial point
<blockquote>
 Indicates whether this optimization should use a warm start initialization, where values of primal and dual variables are given (e.g., from a previous optimization of a related problem.) The default value for this string option is "no".

Possible values:
 - no: do not use the warm start initialization
 - yes: use the warm start initialization
</blockquote>

\anchor OPT_warm_start_same_structure
<strong>warm_start_same_structure</strong> (<em>advanced</em>): Indicates whether a problem with a structure identical to the previous one is to be solved.
<blockquote>
 If enabled, then the algorithm assumes that an NLP is now to be solved whose structure is identical to one that already was considered (with the same NLP object). The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_warm_start_bound_push
<strong>warm_start_bound_push</strong>: same as bound_push for the regular initializer
<blockquote>
 The valid range for this real option is 0 < warm_start_bound_push and its default value is 0.001.
</blockquote>

\anchor OPT_warm_start_bound_frac
<strong>warm_start_bound_frac</strong>: same as bound_frac for the regular initializer
<blockquote>
 The valid range for this real option is 0 < warm_start_bound_frac &le; 0.5 and its default value is 0.001.
</blockquote>

\anchor OPT_warm_start_slack_bound_push
<strong>warm_start_slack_bound_push</strong>: same as slack_bound_push for the regular initializer
<blockquote>
 The valid range for this real option is 0 < warm_start_slack_bound_push and its default value is 0.001.
</blockquote>

\anchor OPT_warm_start_slack_bound_frac
<strong>warm_start_slack_bound_frac</strong>: same as slack_bound_frac for the regular initializer
<blockquote>
 The valid range for this real option is 0 < warm_start_slack_bound_frac &le; 0.5 and its default value is 0.001.
</blockquote>

\anchor OPT_warm_start_mult_bound_push
<strong>warm_start_mult_bound_push</strong>: same as mult_bound_push for the regular initializer
<blockquote>
 The valid range for this real option is 0 < warm_start_mult_bound_push and its default value is 0.001.
</blockquote>

\anchor OPT_warm_start_mult_init_max
<strong>warm_start_mult_init_max</strong>: Maximum initial value for the equality multipliers.
<blockquote>
 The valid range for this real option is unrestricted and its default value is 10<sup>+06</sup>.
</blockquote>

\anchor OPT_warm_start_entire_iterate
<strong>warm_start_entire_iterate</strong> (<em>advanced</em>): Tells algorithm whether to use the GetWarmStartIterate method in the NLP.
<blockquote>
 The default value for this string option is "no".

Possible values:
 - no: call GetStartingPoint in the NLP
 - yes: call GetWarmStartIterate in the NLP
</blockquote>

\anchor OPT_warm_start_target_mu
<strong>warm_start_target_mu</strong> (<em>advanced</em>)
<blockquote>
 Experimental! The valid range for this real option is unrestricted and its default value is 0.
</blockquote>


\subsection OPT_Miscellaneous Miscellaneous

\anchor OPT_option_file_name
<strong>option_file_name</strong>: File name of options file.
<blockquote>
 By default, the name of the Ipopt options file is "ipopt.opt" - or something else if specified in the IpoptApplication::Initialize call. If this option is set by SetStringValue BEFORE the options file is read, it specifies the name of the options file. It does not make any sense to specify this option within the options file. Setting this option to an empty string disables reading of an options file. The default value for this string option is "ipopt.opt".

Possible values:
 - *: Any acceptable standard file name
</blockquote>

\anchor OPT_replace_bounds
<strong>replace_bounds</strong> (<em>advanced</em>): Whether all variable bounds should be replaced by inequality constraints
<blockquote>
 This option must be set for the inexact algorithm. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_skip_finalize_solution_call
<strong>skip_finalize_solution_call</strong> (<em>advanced</em>): Whether a call to NLP::FinalizeSolution after optimization should be suppressed
<blockquote>
 In some Ipopt applications, the user might want to call the FinalizeSolution method separately. Setting this option to "yes" will cause the IpoptApplication object to suppress the default call to that method. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_timing_statistics
<strong>timing_statistics</strong>: Indicates whether to measure time spend in components of Ipopt and NLP evaluation
<blockquote>
 The overall algorithm time is unaffected by this option. The default value for this string option is "no".

Possible values: yes, no
</blockquote>


\subsection OPT_Barrier_Parameter_Update Barrier Parameter Update

\anchor OPT_mu_max_fact
<strong>mu_max_fact</strong>: Factor for initialization of maximum value for barrier parameter.
<blockquote>
 This option determines the upper bound on the barrier parameter. This upper bound is computed as the average complementarity at the initial point times the value of this option. (Only used if option "mu_strategy" is chosen as "adaptive".) The valid range for this real option is 0 < mu_max_fact and its default value is 1000.
</blockquote>

\anchor OPT_mu_max
<strong>mu_max</strong>: Maximum value for barrier parameter.
<blockquote>
 This option specifies an upper bound on the barrier parameter in the adaptive mu selection mode. If this option is set, it overwrites the effect of mu_max_fact. (Only used if option "mu_strategy" is chosen as "adaptive".) The valid range for this real option is 0 < mu_max and its default value is 100000.
</blockquote>

\anchor OPT_mu_min
<strong>mu_min</strong>: Minimum value for barrier parameter.
<blockquote>
 This option specifies the lower bound on the barrier parameter in the adaptive mu selection mode. By default, it is set to the minimum of 1e-11 and min("tol","compl_inf_tol")/("barrier_tol_factor"+1), which should be a reasonable value. (Only used if option "mu_strategy" is chosen as "adaptive".) The valid range for this real option is 0 < mu_min and its default value is 10<sup>-11</sup>.
</blockquote>

\anchor OPT_adaptive_mu_globalization
<strong>adaptive_mu_globalization</strong>: Globalization strategy for the adaptive mu selection mode.
<blockquote>
 To achieve global convergence of the adaptive version, the algorithm has to switch to the monotone mode (Fiacco-McCormick approach) when convergence does not seem to appear. This option sets the criterion used to decide when to do this switch. (Only used if option "mu_strategy" is chosen as "adaptive".) The default value for this string option is "obj-constr-filter".

Possible values:
 - kkt-error: nonmonotone decrease of kkt-error
 - obj-constr-filter: 2-dim filter for objective and constraint violation
 - never-monotone-mode: disables globalization
</blockquote>

\anchor OPT_adaptive_mu_kkterror_red_iters
<strong>adaptive_mu_kkterror_red_iters</strong> (<em>advanced</em>): Maximum number of iterations requiring sufficient progress.
<blockquote>
 For the "kkt-error" based globalization strategy, sufficient progress must be made for "adaptive_mu_kkterror_red_iters" iterations. If this number of iterations is exceeded, the globalization strategy switches to the monotone mode. The valid range for this integer option is 0 &le; adaptive_mu_kkterror_red_iters and its default value is 4.
</blockquote>

\anchor OPT_adaptive_mu_kkterror_red_fact
<strong>adaptive_mu_kkterror_red_fact</strong> (<em>advanced</em>): Sufficient decrease factor for "kkt-error" globalization strategy.
<blockquote>
 For the "kkt-error" based globalization strategy, the error must decrease by this factor to be deemed sufficient decrease. The valid range for this real option is 0 < adaptive_mu_kkterror_red_fact < 1 and its default value is 0.9999.
</blockquote>

\anchor OPT_filter_margin_fact
<strong>filter_margin_fact</strong> (<em>advanced</em>): Factor determining width of margin for obj-constr-filter adaptive globalization strategy.
<blockquote>
 When using the adaptive globalization strategy, "obj-constr-filter", sufficient progress for a filter entry is defined as follows: (new obj) < (filter obj) - filter_margin_fact*(new constr-viol) OR (new constr-viol) < (filter constr-viol) - filter_margin_fact*(new constr-viol). For the description of the "kkt-error-filter" option see "filter_max_margin". The valid range for this real option is 0 < filter_margin_fact < 1 and its default value is 10<sup>-05</sup>.
</blockquote>

\anchor OPT_filter_max_margin
<strong>filter_max_margin</strong> (<em>advanced</em>): Maximum width of margin in obj-constr-filter adaptive globalization strategy.
<blockquote>
 The valid range for this real option is 0 < filter_max_margin and its default value is 1.
</blockquote>

\anchor OPT_adaptive_mu_restore_previous_iterate
<strong>adaptive_mu_restore_previous_iterate</strong> (<em>advanced</em>): Indicates if the previous accepted iterate should be restored if the monotone mode is entered.
<blockquote>
 When the globalization strategy for the adaptive barrier algorithm switches to the monotone mode, it can either start from the most recent iterate (no), or from the last iterate that was accepted (yes). The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_adaptive_mu_monotone_init_factor
<strong>adaptive_mu_monotone_init_factor</strong> (<em>advanced</em>): Determines the initial value of the barrier parameter when switching to the monotone mode.
<blockquote>
 When the globalization strategy for the adaptive barrier algorithm switches to the monotone mode and fixed_mu_oracle is chosen as "average_compl", the barrier parameter is set to the current average complementarity times the value of "adaptive_mu_monotone_init_factor". The valid range for this real option is 0 < adaptive_mu_monotone_init_factor and its default value is 0.8.
</blockquote>

\anchor OPT_adaptive_mu_kkt_norm_type
<strong>adaptive_mu_kkt_norm_type</strong> (<em>advanced</em>): Norm used for the KKT error in the adaptive mu globalization strategies.
<blockquote>
 When computing the KKT error for the globalization strategies, the norm to be used is specified with this option. Note, this option is also used in the QualityFunctionMuOracle. The default value for this string option is "2-norm-squared".

Possible values:
 - 1-norm: use the 1-norm (abs sum)
 - 2-norm-squared: use the 2-norm squared (sum of squares)
 - max-norm: use the infinity norm (max)
 - 2-norm: use 2-norm
</blockquote>

\anchor OPT_mu_strategy
<strong>mu_strategy</strong>: Update strategy for barrier parameter.
<blockquote>
 Determines which barrier parameter update strategy is to be used. The default value for this string option is "monotone".

Possible values:
 - monotone: use the monotone (Fiacco-McCormick) strategy
 - adaptive: use the adaptive update strategy
</blockquote>

\anchor OPT_mu_oracle
<strong>mu_oracle</strong>: Oracle for a new barrier parameter in the adaptive strategy.
<blockquote>
 Determines how a new barrier parameter is computed in each "free-mode" iteration of the adaptive barrier parameter strategy. (Only considered if "adaptive" is selected for option "mu_strategy"). The default value for this string option is "quality-function".

Possible values:
 - probing: Mehrotra's probing heuristic
 - loqo: LOQO's centrality rule
 - quality-function: minimize a quality function
</blockquote>

\anchor OPT_fixed_mu_oracle
<strong>fixed_mu_oracle</strong>: Oracle for the barrier parameter when switching to fixed mode.
<blockquote>
 Determines how the first value of the barrier parameter should be computed when switching to the "monotone mode" in the adaptive strategy. (Only considered if "adaptive" is selected for option "mu_strategy".) The default value for this string option is "average_compl".

Possible values:
 - probing: Mehrotra's probing heuristic
 - loqo: LOQO's centrality rule
 - quality-function: minimize a quality function
 - average_compl: base on current average complementarity
</blockquote>

\anchor OPT_mu_init
<strong>mu_init</strong>: Initial value for the barrier parameter.
<blockquote>
 This option determines the initial value for the barrier parameter (mu). It is only relevant in the monotone, Fiacco-McCormick version of the algorithm. (i.e., if "mu_strategy" is chosen as "monotone") The valid range for this real option is 0 < mu_init and its default value is 0.1.
</blockquote>

\anchor OPT_barrier_tol_factor
<strong>barrier_tol_factor</strong>: Factor for mu in barrier stop test.
<blockquote>
 The convergence tolerance for each barrier problem in the monotone mode is the value of the barrier parameter times "barrier_tol_factor". This option is also used in the adaptive mu strategy during the monotone mode. This is kappa_epsilon in implementation paper. The valid range for this real option is 0 < barrier_tol_factor and its default value is 10.
</blockquote>

\anchor OPT_mu_linear_decrease_factor
<strong>mu_linear_decrease_factor</strong>: Determines linear decrease rate of barrier parameter.
<blockquote>
 For the Fiacco-McCormick update procedure the new barrier parameter mu is obtained by taking the minimum of mu*"mu_linear_decrease_factor" and mu^"superlinear_decrease_power". This is kappa_mu in implementation paper. This option is also used in the adaptive mu strategy during the monotone mode. The valid range for this real option is 0 < mu_linear_decrease_factor < 1 and its default value is 0.2.
</blockquote>

\anchor OPT_mu_superlinear_decrease_power
<strong>mu_superlinear_decrease_power</strong>: Determines superlinear decrease rate of barrier parameter.
<blockquote>
 For the Fiacco-McCormick update procedure the new barrier parameter mu is obtained by taking the minimum of mu*"mu_linear_decrease_factor" and mu^"superlinear_decrease_power". This is theta_mu in implementation paper. This option is also used in the adaptive mu strategy during the monotone mode. The valid range for this real option is 1 < mu_superlinear_decrease_power < 2 and its default value is 1.5.
</blockquote>

\anchor OPT_mu_allow_fast_monotone_decrease
<strong>mu_allow_fast_monotone_decrease</strong> (<em>advanced</em>): Allow skipping of barrier problem if barrier test is already met.
<blockquote>
 The default value for this string option is "yes".

Possible values:
 - no: Take at least one iteration per barrier problem even if the barrier test is already met for the updated barrier parameter
 - yes: Allow fast decrease of mu if barrier test it met
</blockquote>

\anchor OPT_tau_min
<strong>tau_min</strong> (<em>advanced</em>): Lower bound on fraction-to-the-boundary parameter tau.
<blockquote>
 This is tau_min in the implementation paper. This option is also used in the adaptive mu strategy during the monotone mode. The valid range for this real option is 0 < tau_min < 1 and its default value is 0.99.
</blockquote>

\anchor OPT_sigma_max
<strong>sigma_max</strong> (<em>advanced</em>): Maximum value of the centering parameter.
<blockquote>
 This is the upper bound for the centering parameter chosen by the quality function based barrier parameter update. Only used if option "mu_oracle" is set to "quality-function". The valid range for this real option is 0 < sigma_max and its default value is 100.
</blockquote>

\anchor OPT_sigma_min
<strong>sigma_min</strong> (<em>advanced</em>): Minimum value of the centering parameter.
<blockquote>
 This is the lower bound for the centering parameter chosen by the quality function based barrier parameter update. Only used if option "mu_oracle" is set to "quality-function". The valid range for this real option is 0 &le; sigma_min and its default value is 10<sup>-06</sup>.
</blockquote>

\anchor OPT_quality_function_norm_type
<strong>quality_function_norm_type</strong> (<em>advanced</em>): Norm used for components of the quality function.
<blockquote>
 Only used if option "mu_oracle" is set to "quality-function". The default value for this string option is "2-norm-squared".

Possible values:
 - 1-norm: use the 1-norm (abs sum)
 - 2-norm-squared: use the 2-norm squared (sum of squares)
 - max-norm: use the infinity norm (max)
 - 2-norm: use 2-norm
</blockquote>

\anchor OPT_quality_function_centrality
<strong>quality_function_centrality</strong> (<em>advanced</em>): The penalty term for centrality that is included in quality function.
<blockquote>
 This determines whether a term is added to the quality function to penalize deviation from centrality with respect to complementarity. The complementarity measure here is the xi in the Loqo update rule. Only used if option "mu_oracle" is set to "quality-function". The default value for this string option is "none".

Possible values:
 - none: no penalty term is added
 - log: complementarity * the log of the centrality measure
 - reciprocal: complementarity * the reciprocal of the centrality measure
 - cubed-reciprocal: complementarity * the reciprocal of the centrality measure cubed
</blockquote>

\anchor OPT_quality_function_balancing_term
<strong>quality_function_balancing_term</strong> (<em>advanced</em>): The balancing term included in the quality function for centrality.
<blockquote>
 This determines whether a term is added to the quality function that penalizes situations where the complementarity is much smaller than dual and primal infeasibilities. Only used if option "mu_oracle" is set to "quality-function". The default value for this string option is "none".

Possible values:
 - none: no balancing term is added
 - cubic: Max(0,Max(dual_inf,primal_inf)-compl)^3
</blockquote>

\anchor OPT_quality_function_max_section_steps
<strong>quality_function_max_section_steps</strong>: Maximum number of search steps during direct search procedure determining the optimal centering parameter.
<blockquote>
 The golden section search is performed for the quality function based mu oracle. Only used if option "mu_oracle" is set to "quality-function". The valid range for this integer option is 0 &le; quality_function_max_section_steps and its default value is 8.
</blockquote>

\anchor OPT_quality_function_section_sigma_tol
<strong>quality_function_section_sigma_tol</strong> (<em>advanced</em>): Tolerance for the section search procedure determining the optimal centering parameter (in sigma space).
<blockquote>
 The golden section search is performed for the quality function based mu oracle. Only used if option "mu_oracle" is set to "quality-function". The valid range for this real option is 0 &le; quality_function_section_sigma_tol < 1 and its default value is 0.01.
</blockquote>

\anchor OPT_quality_function_section_qf_tol
<strong>quality_function_section_qf_tol</strong> (<em>advanced</em>): Tolerance for the golden section search procedure determining the optimal centering parameter (in the function value space).
<blockquote>
 The golden section search is performed for the quality function based mu oracle. Only used if option "mu_oracle" is set to "quality-function". The valid range for this real option is 0 &le; quality_function_section_qf_tol < 1 and its default value is 0.
</blockquote>


\subsection OPT_Line_Search Line Search

\anchor OPT_line_search_method
<strong>line_search_method</strong> (<em>advanced</em>): Globalization method used in backtracking line search
<blockquote>
 Only the "filter" choice is officially supported. But sometimes, good results might be obtained with the other choices. The default value for this string option is "filter".

Possible values:
 - filter: Filter method
 - cg-penalty: Chen-Goldfarb penalty function
 - penalty: Standard penalty function
</blockquote>

\anchor OPT_alpha_red_factor
<strong>alpha_red_factor</strong> (<em>advanced</em>): Fractional reduction of the trial step size in the backtracking line search.
<blockquote>
 At every step of the backtracking line search, the trial step size is reduced by this factor. The valid range for this real option is 0 < alpha_red_factor < 1 and its default value is 0.5.
</blockquote>

\anchor OPT_accept_every_trial_step
<strong>accept_every_trial_step</strong>: Always accept the first trial step.
<blockquote>
 Setting this option to "yes" essentially disables the line search and makes the algorithm take aggressive steps, without global convergence guarantees. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_accept_after_max_steps
<strong>accept_after_max_steps</strong> (<em>advanced</em>): Accept a trial point after maximal this number of steps even if it does not satisfy line search conditions.
<blockquote>
 Setting this to -1 disables this option. The valid range for this integer option is -1 &le; accept_after_max_steps and its default value is -1.
</blockquote>

\anchor OPT_alpha_for_y
<strong>alpha_for_y</strong>: Method to determine the step size for constraint multipliers (alpha_y) .
<blockquote>
 The default value for this string option is "primal".

Possible values:
 - primal: use primal step size
 - bound-mult: use step size for the bound multipliers (good for LPs)
 - min: use the min of primal and bound multipliers
 - max: use the max of primal and bound multipliers
 - full: take a full step of size one
 - min-dual-infeas: choose step size minimizing new dual infeasibility
 - safer-min-dual-infeas: like "min_dual_infeas", but safeguarded by "min" and "max"
 - primal-and-full: use the primal step size, and full step if delta_x <= alpha_for_y_tol
 - dual-and-full: use the dual step size, and full step if delta_x <= alpha_for_y_tol
 - acceptor: Call LSAcceptor to get step size for y
</blockquote>

\anchor OPT_alpha_for_y_tol
<strong>alpha_for_y_tol</strong>: Tolerance for switching to full equality multiplier steps.
<blockquote>
 This is only relevant if "alpha_for_y" is chosen "primal-and-full" or "dual-and-full". The step size for the equality constraint multipliers is taken to be one if the max-norm of the primal step is less than this tolerance. The valid range for this real option is 0 &le; alpha_for_y_tol and its default value is 10.
</blockquote>

\anchor OPT_tiny_step_tol
<strong>tiny_step_tol</strong> (<em>advanced</em>): Tolerance for detecting numerically insignificant steps.
<blockquote>
 If the search direction in the primal variables (x and s) is, in relative terms for each component, less than this value, the algorithm accepts the full step without line search. If this happens repeatedly, the algorithm will terminate with a corresponding exit message. The default value is 10 times machine precision. The valid range for this real option is 0 &le; tiny_step_tol and its default value is 2.22045 &middot; 10<sup>-15</sup>.
</blockquote>

\anchor OPT_tiny_step_y_tol
<strong>tiny_step_y_tol</strong> (<em>advanced</em>): Tolerance for quitting because of numerically insignificant steps.
<blockquote>
 If the search direction in the primal variables (x and s) is, in relative terms for each component, repeatedly less than tiny_step_tol, and the step in the y variables is smaller than this threshold, the algorithm will terminate. The valid range for this real option is 0 &le; tiny_step_y_tol and its default value is 0.01.
</blockquote>

\anchor OPT_watchdog_shortened_iter_trigger
<strong>watchdog_shortened_iter_trigger</strong>: Number of shortened iterations that trigger the watchdog.
<blockquote>
 If the number of successive iterations in which the backtracking line search did not accept the first trial point exceeds this number, the watchdog procedure is activated. Choosing "0" here disables the watchdog procedure. The valid range for this integer option is 0 &le; watchdog_shortened_iter_trigger and its default value is 10.
</blockquote>

\anchor OPT_watchdog_trial_iter_max
<strong>watchdog_trial_iter_max</strong>: Maximum number of watchdog iterations.
<blockquote>
 This option determines the number of trial iterations allowed before the watchdog procedure is aborted and the algorithm returns to the stored point. The valid range for this integer option is 1 &le; watchdog_trial_iter_max and its default value is 3.
</blockquote>

\anchor OPT_theta_max_fact
<strong>theta_max_fact</strong> (<em>advanced</em>): Determines upper bound for constraint violation in the filter.
<blockquote>
 The algorithmic parameter theta_max is determined as theta_max_fact times the maximum of 1 and the constraint violation at initial point. Any point with a constraint violation larger than theta_max is unacceptable to the filter (see Eqn. (21) in the implementation paper). The valid range for this real option is 0 < theta_max_fact and its default value is 10000.
</blockquote>

\anchor OPT_theta_min_fact
<strong>theta_min_fact</strong> (<em>advanced</em>): Determines constraint violation threshold in the switching rule.
<blockquote>
 The algorithmic parameter theta_min is determined as theta_min_fact times the maximum of 1 and the constraint violation at initial point. The switching rule treats an iteration as an h-type iteration whenever the current constraint violation is larger than theta_min (see paragraph before Eqn. (19) in the implementation paper). The valid range for this real option is 0 < theta_min_fact and its default value is 0.0001.
</blockquote>

\anchor OPT_eta_phi
<strong>eta_phi</strong> (<em>advanced</em>): Relaxation factor in the Armijo condition.
<blockquote>
 See Eqn. (20) in the implementation paper. The valid range for this real option is 0 < eta_phi < 0.5 and its default value is 10<sup>-08</sup>.
</blockquote>

\anchor OPT_delta
<strong>delta</strong> (<em>advanced</em>): Multiplier for constraint violation in the switching rule.
<blockquote>
 See Eqn. (19) in the implementation paper. The valid range for this real option is 0 < delta and its default value is 1.
</blockquote>

\anchor OPT_s_phi
<strong>s_phi</strong> (<em>advanced</em>): Exponent for linear barrier function model in the switching rule.
<blockquote>
 See Eqn. (19) in the implementation paper. The valid range for this real option is 1 < s_phi and its default value is 2.3.
</blockquote>

\anchor OPT_s_theta
<strong>s_theta</strong> (<em>advanced</em>): Exponent for current constraint violation in the switching rule.
<blockquote>
 See Eqn. (19) in the implementation paper. The valid range for this real option is 1 < s_theta and its default value is 1.1.
</blockquote>

\anchor OPT_gamma_phi
<strong>gamma_phi</strong> (<em>advanced</em>): Relaxation factor in the filter margin for the barrier function.
<blockquote>
 See Eqn. (18a) in the implementation paper. The valid range for this real option is 0 < gamma_phi < 1 and its default value is 10<sup>-08</sup>.
</blockquote>

\anchor OPT_gamma_theta
<strong>gamma_theta</strong> (<em>advanced</em>): Relaxation factor in the filter margin for the constraint violation.
<blockquote>
 See Eqn. (18b) in the implementation paper. The valid range for this real option is 0 < gamma_theta < 1 and its default value is 10<sup>-05</sup>.
</blockquote>

\anchor OPT_alpha_min_frac
<strong>alpha_min_frac</strong> (<em>advanced</em>): Safety factor for the minimal step size (before switching to restoration phase).
<blockquote>
 This is gamma_alpha in Eqn. (23) in the implementation paper. The valid range for this real option is 0 < alpha_min_frac < 1 and its default value is 0.05.
</blockquote>

\anchor OPT_max_soc
<strong>max_soc</strong>: Maximum number of second order correction trial steps at each iteration.
<blockquote>
 Choosing 0 disables the second order corrections. This is p^{max} of Step A-5.9 of Algorithm A in the implementation paper. The valid range for this integer option is 0 &le; max_soc and its default value is 4.
</blockquote>

\anchor OPT_kappa_soc
<strong>kappa_soc</strong> (<em>advanced</em>): Factor in the sufficient reduction rule for second order correction.
<blockquote>
 This option determines how much a second order correction step must reduce the constraint violation so that further correction steps are attempted. See Step A-5.9 of Algorithm A in the implementation paper. The valid range for this real option is 0 < kappa_soc and its default value is 0.99.
</blockquote>

\anchor OPT_obj_max_inc
<strong>obj_max_inc</strong> (<em>advanced</em>): Determines the upper bound on the acceptable increase of barrier objective function.
<blockquote>
 Trial points are rejected if they lead to an increase in the barrier objective function by more than obj_max_inc orders of magnitude. The valid range for this real option is 1 < obj_max_inc and its default value is 5.
</blockquote>

\anchor OPT_max_filter_resets
<strong>max_filter_resets</strong> (<em>advanced</em>): Maximal allowed number of filter resets
<blockquote>
 A positive number enables a heuristic that resets the filter, whenever in more than "filter_reset_trigger" successive iterations the last rejected trial steps size was rejected because of the filter. This option determine the maximal number of resets that are allowed to take place. The valid range for this integer option is 0 &le; max_filter_resets and its default value is 5.
</blockquote>

\anchor OPT_filter_reset_trigger
<strong>filter_reset_trigger</strong> (<em>advanced</em>): Number of iterations that trigger the filter reset.
<blockquote>
 If the filter reset heuristic is active and the number of successive iterations in which the last rejected trial step size was rejected because of the filter, the filter is reset. The valid range for this integer option is 1 &le; filter_reset_trigger and its default value is 5.
</blockquote>

\anchor OPT_corrector_type
<strong>corrector_type</strong> (<em>advanced</em>): The type of corrector steps that should be taken.
<blockquote>
 If "mu_strategy" is "adaptive", this option determines what kind of corrector steps should be tried. Changing this option is experimental. The default value for this string option is "none".

Possible values:
 - none: no corrector
 - affine: corrector step towards mu=0
 - primal-dual: corrector step towards current mu
</blockquote>

\anchor OPT_skip_corr_if_neg_curv
<strong>skip_corr_if_neg_curv</strong> (<em>advanced</em>): Whether to skip the corrector step in negative curvature iteration.
<blockquote>
 The corrector step is not tried if negative curvature has been encountered during the computation of the search direction in the current iteration. This option is only used if "mu_strategy" is "adaptive". Changing this option is experimental. The default value for this string option is "yes".

Possible values: yes, no
</blockquote>

\anchor OPT_skip_corr_in_monotone_mode
<strong>skip_corr_in_monotone_mode</strong> (<em>advanced</em>): Whether to skip the corrector step during monotone barrier parameter mode.
<blockquote>
 The corrector step is not tried if the algorithm is currently in the monotone mode (see also option "barrier_strategy"). This option is only used if "mu_strategy" is "adaptive". Changing this option is experimental. The default value for this string option is "yes".

Possible values: yes, no
</blockquote>

\anchor OPT_corrector_compl_avrg_red_fact
<strong>corrector_compl_avrg_red_fact</strong> (<em>advanced</em>): Complementarity tolerance factor for accepting corrector step.
<blockquote>
 This option determines the factor by which complementarity is allowed to increase for a corrector step to be accepted. Changing this option is experimental. The valid range for this real option is 0 < corrector_compl_avrg_red_fact and its default value is 1.
</blockquote>

\anchor OPT_soc_method
<strong>soc_method</strong>: Ways to apply second order correction
<blockquote>
 This option determines the way to apply second order correction, 0 is the method described in the implementation paper. 1 is the modified way which adds alpha on the rhs of x and s rows. The valid range for this integer option is 0 &le; soc_method &le; 1 and its default value is 0.
</blockquote>

\anchor OPT_nu_init
<strong>nu_init</strong> (<em>advanced</em>): Initial value of the penalty parameter.
<blockquote>
 The valid range for this real option is 0 < nu_init and its default value is 10<sup>-06</sup>.
</blockquote>

\anchor OPT_nu_inc
<strong>nu_inc</strong> (<em>advanced</em>): Increment of the penalty parameter.
<blockquote>
 The valid range for this real option is 0 < nu_inc and its default value is 0.0001.
</blockquote>

\anchor OPT_rho
<strong>rho</strong> (<em>advanced</em>): Value in penalty parameter update formula.
<blockquote>
 The valid range for this real option is 0 < rho < 1 and its default value is 0.1.
</blockquote>

\anchor OPT_kappa_sigma
<strong>kappa_sigma</strong> (<em>advanced</em>): Factor limiting the deviation of dual variables from primal estimates.
<blockquote>
 If the dual variables deviate from their primal estimates, a correction is performed. See Eqn. (16) in the implementation paper. Setting the value to less than 1 disables the correction. The valid range for this real option is 0 < kappa_sigma and its default value is 10<sup>+10</sup>.
</blockquote>

\anchor OPT_recalc_y
<strong>recalc_y</strong>: Tells the algorithm to recalculate the equality and inequality multipliers as least square estimates.
<blockquote>
 This asks the algorithm to recompute the multipliers, whenever the current infeasibility is less than recalc_y_feas_tol. Choosing yes might be helpful in the quasi-Newton option. However, each recalculation requires an extra factorization of the linear system. If a limited memory quasi-Newton option is chosen, this is used by default. The default value for this string option is "no".

Possible values:
 - no: use the Newton step to update the multipliers
 - yes: use least-square multiplier estimates
</blockquote>

\anchor OPT_recalc_y_feas_tol
<strong>recalc_y_feas_tol</strong>: Feasibility threshold for recomputation of multipliers.
<blockquote>
 If recalc_y is chosen and the current infeasibility is less than this value, then the multipliers are recomputed. The valid range for this real option is 0 < recalc_y_feas_tol and its default value is 10<sup>-06</sup>.
</blockquote>

\anchor OPT_slack_move
<strong>slack_move</strong> (<em>advanced</em>): Correction size for very small slacks.
<blockquote>
 Due to numerical issues or the lack of an interior, the slack variables might become very small. If a slack becomes very small compared to machine precision, the corresponding bound is moved slightly. This parameter determines how large the move should be. Its default value is mach_eps^{3/4}. See also end of Section 3.5 in implementation paper - but actual implementation might be somewhat different. The valid range for this real option is 0 &le; slack_move and its default value is 1.81899 &middot; 10<sup>-12</sup>.
</blockquote>

\anchor OPT_constraint_violation_norm_type
<strong>constraint_violation_norm_type</strong> (<em>advanced</em>): Norm to be used for the constraint violation in the line search.
<blockquote>
 Determines which norm should be used when the algorithm computes the constraint violation in the line search. The default value for this string option is "1-norm".

Possible values:
 - 1-norm: use the 1-norm
 - 2-norm: use the 2-norm
 - max-norm: use the infinity norm
</blockquote>


\subsection OPT_Linear_Solver Linear Solver

\anchor OPT_linear_solver
<strong>linear_solver</strong>: Linear solver used for step computations.
<blockquote>
 Determines which linear algebra package is to be used for the solution of the augmented linear system (for obtaining the search directions). The default value for this string option is "ma27".

Possible values:
 - ma27: use the Harwell routine MA27
 - ma57: use the Harwell routine MA57
 - ma77: use the Harwell routine HSL_MA77
 - ma86: use the Harwell routine HSL_MA86
 - ma97: use the Harwell routine HSL_MA97
 - pardiso: use the Pardiso package from pardiso-project.org
 - pardisomkl: use the Pardiso package from Intel MKL
 - spral: use the Spral package
 - wsmp: use the Wsmp package
 - mumps: use the Mumps package
 - custom: use custom linear solver (expert use)
</blockquote>

\anchor OPT_linear_system_scaling
<strong>linear_system_scaling</strong>: Method for scaling the linear system.
<blockquote>
 Determines the method used to compute symmetric scaling factors for the augmented system (see also the "linear_scaling_on_demand" option). This scaling is independent of the NLP problem scaling. The default is MC19 only if MA27, MA57, MA77, or MA86 are selected as linear solvers. Otherwise it is 'none'. The default value for this string option is "mc19".

Possible values:
 - none: no scaling will be performed
 - mc19: use the Harwell routine MC19
 - slack-based: use the slack values
</blockquote>

\anchor OPT_hsllib
<strong>hsllib</strong>: Name of library containing HSL routines for load at runtime
<blockquote>
 The default value for this string option is "libhsl.so" ("libhsl.dylib" on macOS, "libhsl.dll" on Windows).

Possible values:
 - *: Any acceptable filename (may contain path, too)
</blockquote>

\anchor OPT_pardisolib
<strong>pardisolib</strong>: Name of library containing Pardiso routines (from pardiso-project.org) for load at runtime
<blockquote>
 The default value for this string option is "/home/stefan/work/coin/libpardiso600-GNU800-X86-64.so".

Possible values:
 - *: Any acceptable filename (may contain path, too)
</blockquote>

\anchor OPT_linear_scaling_on_demand
<strong>linear_scaling_on_demand</strong>: Flag indicating that linear scaling is only done if it seems required.
<blockquote>
 This option is only important if a linear scaling method (e.g., mc19) is used. If you choose "no", then the scaling factors are computed for every linear system from the start. This can be quite expensive. Choosing "yes" means that the algorithm will start the scaling method only when the solutions to the linear system seem not good, and then use it until the end. The default value for this string option is "yes".

Possible values: yes, no
</blockquote>


\subsection OPT_Step_Calculation Step Calculation

\anchor OPT_mehrotra_algorithm
<strong>mehrotra_algorithm</strong>: Indicates whether to do Mehrotra's predictor-corrector algorithm.
<blockquote>
 If enabled, line search is disabled and the (unglobalized) adaptive mu strategy is chosen with the "probing" oracle, and "corrector_type=affine" is used without any safeguards; you should not set any of those options explicitly in addition. Also, unless otherwise specified, the values of "bound_push", "bound_frac", and "bound_mult_init_val" are set more aggressive, and sets "alpha_for_y=bound_mult". The Mehrotra's predictor-corrector algorithm works usually very well for LPs and convex QPs. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_fast_step_computation
<strong>fast_step_computation</strong>: Indicates if the linear system should be solved quickly.
<blockquote>
 If enabled, the algorithm assumes that the linear system that is solved to obtain the search direction is solved sufficiently well. In that case, no residuals are computed to verify the solution and the computation of the search direction is a little faster. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_min_refinement_steps
<strong>min_refinement_steps</strong>: Minimum number of iterative refinement steps per linear system solve.
<blockquote>
 Iterative refinement (on the full unsymmetric system) is performed for each right hand side. This option determines the minimum number of iterative refinements (i.e. at least "min_refinement_steps" iterative refinement steps are enforced per right hand side.) The valid range for this integer option is 0 &le; min_refinement_steps and its default value is 1.
</blockquote>

\anchor OPT_max_refinement_steps
<strong>max_refinement_steps</strong>: Maximum number of iterative refinement steps per linear system solve.
<blockquote>
 Iterative refinement (on the full unsymmetric system) is performed for each right hand side. This option determines the maximum number of iterative refinement steps. The valid range for this integer option is 0 &le; max_refinement_steps and its default value is 10.
</blockquote>

\anchor OPT_residual_ratio_max
<strong>residual_ratio_max</strong> (<em>advanced</em>): Iterative refinement tolerance
<blockquote>
 Iterative refinement is performed until the residual test ratio is less than this tolerance (or until "max_refinement_steps" refinement steps are performed). The valid range for this real option is 0 < residual_ratio_max and its default value is 10<sup>-10</sup>.
</blockquote>

\anchor OPT_residual_ratio_singular
<strong>residual_ratio_singular</strong> (<em>advanced</em>): Threshold for declaring linear system singular after failed iterative refinement.
<blockquote>
 If the residual test ratio is larger than this value after failed iterative refinement, the algorithm pretends that the linear system is singular. The valid range for this real option is 0 < residual_ratio_singular and its default value is 10<sup>-05</sup>.
</blockquote>

\anchor OPT_residual_improvement_factor
<strong>residual_improvement_factor</strong> (<em>advanced</em>): Minimal required reduction of residual test ratio in iterative refinement.
<blockquote>
 If the improvement of the residual test ratio made by one iterative refinement step is not better than this factor, iterative refinement is aborted. The valid range for this real option is 0 < residual_improvement_factor and its default value is 1.
</blockquote>

\anchor OPT_neg_curv_test_tol
<strong>neg_curv_test_tol</strong>: Tolerance for heuristic to ignore wrong inertia.
<blockquote>
 If nonzero, incorrect inertia in the augmented system is ignored, and Ipopt tests if the direction is a direction of positive curvature. This tolerance is alpha_n in the paper by Zavala and Chiang (2014) and it determines when the direction is considered to be sufficiently positive. A value in the range of [1e-12, 1e-11] is recommended. The valid range for this real option is 0 &le; neg_curv_test_tol and its default value is 0.
</blockquote>

\anchor OPT_neg_curv_test_reg
<strong>neg_curv_test_reg</strong>: Whether to do the curvature test with the primal regularization (see Zavala and Chiang, 2014).
<blockquote>
 The default value for this string option is "yes".

Possible values:
 - yes: use primal regularization with the inertia-free curvature test
 - no: use original IPOPT approach, in which the primal regularization is ignored
</blockquote>

\anchor OPT_max_hessian_perturbation
<strong>max_hessian_perturbation</strong>: Maximum value of regularization parameter for handling negative curvature.
<blockquote>
 In order to guarantee that the search directions are indeed proper descent directions, Ipopt requires that the inertia of the (augmented) linear system for the step computation has the correct number of negative and positive eigenvalues. The idea is that this guides the algorithm away from maximizers and makes Ipopt more likely converge to first order optimal points that are minimizers. If the inertia is not correct, a multiple of the identity matrix is added to the Hessian of the Lagrangian in the augmented system. This parameter gives the maximum value of the regularization parameter. If a regularization of that size is not enough, the algorithm skips this iteration and goes to the restoration phase. This is delta_w^max in the implementation paper. The valid range for this real option is 0 < max_hessian_perturbation and its default value is 10<sup>+20</sup>.
</blockquote>

\anchor OPT_min_hessian_perturbation
<strong>min_hessian_perturbation</strong>: Smallest perturbation of the Hessian block.
<blockquote>
 The size of the perturbation of the Hessian block is never selected smaller than this value, unless no perturbation is necessary. This is delta_w^min in implementation paper. The valid range for this real option is 0 &le; min_hessian_perturbation and its default value is 10<sup>-20</sup>.
</blockquote>

\anchor OPT_perturb_inc_fact_first
<strong>perturb_inc_fact_first</strong>: Increase factor for x-s perturbation for very first perturbation.
<blockquote>
 The factor by which the perturbation is increased when a trial value was not sufficient - this value is used for the computation of the very first perturbation and allows a different value for the first perturbation than that used for the remaining perturbations. This is bar_kappa_w^+ in the implementation paper. The valid range for this real option is 1 < perturb_inc_fact_first and its default value is 100.
</blockquote>

\anchor OPT_perturb_inc_fact
<strong>perturb_inc_fact</strong>: Increase factor for x-s perturbation.
<blockquote>
 The factor by which the perturbation is increased when a trial value was not sufficient - this value is used for the computation of all perturbations except for the first. This is kappa_w^+ in the implementation paper. The valid range for this real option is 1 < perturb_inc_fact and its default value is 8.
</blockquote>

\anchor OPT_perturb_dec_fact
<strong>perturb_dec_fact</strong>: Decrease factor for x-s perturbation.
<blockquote>
 The factor by which the perturbation is decreased when a trial value is deduced from the size of the most recent successful perturbation. This is kappa_w^- in the implementation paper. The valid range for this real option is 0 < perturb_dec_fact < 1 and its default value is 0.333333.
</blockquote>

\anchor OPT_first_hessian_perturbation
<strong>first_hessian_perturbation</strong>: Size of first x-s perturbation tried.
<blockquote>
 The first value tried for the x-s perturbation in the inertia correction scheme. This is delta_0 in the implementation paper. The valid range for this real option is 0 < first_hessian_perturbation and its default value is 0.0001.
</blockquote>

\anchor OPT_jacobian_regularization_value
<strong>jacobian_regularization_value</strong>: Size of the regularization for rank-deficient constraint Jacobians.
<blockquote>
 This is bar delta_c in the implementation paper. The valid range for this real option is 0 &le; jacobian_regularization_value and its default value is 10<sup>-08</sup>.
</blockquote>

\anchor OPT_jacobian_regularization_exponent
<strong>jacobian_regularization_exponent</strong> (<em>advanced</em>): Exponent for mu in the regularization for rank-deficient constraint Jacobians.
<blockquote>
 This is kappa_c in the implementation paper. The valid range for this real option is 0 &le; jacobian_regularization_exponent and its default value is 0.25.
</blockquote>

\anchor OPT_perturb_always_cd
<strong>perturb_always_cd</strong> (<em>advanced</em>): Active permanent perturbation of constraint linearization.
<blockquote>
 Enabling this option leads to using the delta_c and delta_d perturbation for the computation of every search direction. Usually, it is only used when the iteration matrix is singular. The default value for this string option is "no".

Possible values: yes, no
</blockquote>


\subsection OPT_Restoration_Phase Restoration Phase

\anchor OPT_expect_infeasible_problem
<strong>expect_infeasible_problem</strong>: Enable heuristics to quickly detect an infeasible problem.
<blockquote>
 This options is meant to activate heuristics that may speed up the infeasibility determination if you expect that there is a good chance for the problem to be infeasible. In the filter line search procedure, the restoration phase is called more quickly than usually, and more reduction in the constraint violation is enforced before the restoration phase is left. If the problem is square, this option is enabled automatically. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_expect_infeasible_problem_ctol
<strong>expect_infeasible_problem_ctol</strong>: Threshold for disabling "expect_infeasible_problem" option.
<blockquote>
 If the constraint violation becomes smaller than this threshold, the "expect_infeasible_problem" heuristics in the filter line search are disabled. If the problem is square, this options is set to 0. The valid range for this real option is 0 &le; expect_infeasible_problem_ctol and its default value is 0.001.
</blockquote>

\anchor OPT_expect_infeasible_problem_ytol
<strong>expect_infeasible_problem_ytol</strong>: Multiplier threshold for activating "expect_infeasible_problem" option.
<blockquote>
 If the max norm of the constraint multipliers becomes larger than this value and "expect_infeasible_problem" is chosen, then the restoration phase is entered. The valid range for this real option is 0 < expect_infeasible_problem_ytol and its default value is 10<sup>+08</sup>.
</blockquote>

\anchor OPT_start_with_resto
<strong>start_with_resto</strong>: Whether to switch to restoration phase in first iteration.
<blockquote>
 Setting this option to "yes" forces the algorithm to switch to the feasibility restoration phase in the first iteration. If the initial point is feasible, the algorithm will abort with a failure. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_soft_resto_pderror_reduction_factor
<strong>soft_resto_pderror_reduction_factor</strong>: Required reduction in primal-dual error in the soft restoration phase.
<blockquote>
 The soft restoration phase attempts to reduce the primal-dual error with regular steps. If the damped primal-dual step (damped only to satisfy the fraction-to-the-boundary rule) is not decreasing the primal-dual error by at least this factor, then the regular restoration phase is called. Choosing "0" here disables the soft restoration phase. The valid range for this real option is 0 &le; soft_resto_pderror_reduction_factor and its default value is 0.9999.
</blockquote>

\anchor OPT_max_soft_resto_iters
<strong>max_soft_resto_iters</strong> (<em>advanced</em>): Maximum number of iterations performed successively in soft restoration phase.
<blockquote>
 If the soft restoration phase is performed for more than so many iterations in a row, the regular restoration phase is called. The valid range for this integer option is 0 &le; max_soft_resto_iters and its default value is 10.
</blockquote>

\anchor OPT_required_infeasibility_reduction
<strong>required_infeasibility_reduction</strong>: Required reduction of infeasibility before leaving restoration phase.
<blockquote>
 The restoration phase algorithm is performed, until a point is found that is acceptable to the filter and the infeasibility has been reduced by at least the fraction given by this option. The valid range for this real option is 0 &le; required_infeasibility_reduction < 1 and its default value is 0.9.
</blockquote>

\anchor OPT_max_resto_iter
<strong>max_resto_iter</strong> (<em>advanced</em>): Maximum number of successive iterations in restoration phase.
<blockquote>
 The algorithm terminates with an error message if the number of iterations successively taken in the restoration phase exceeds this number. The valid range for this integer option is 0 &le; max_resto_iter and its default value is 3000000.
</blockquote>

\anchor OPT_evaluate_orig_obj_at_resto_trial
<strong>evaluate_orig_obj_at_resto_trial</strong>: Determines if the original objective function should be evaluated at restoration phase trial points.
<blockquote>
 Enabling this option makes the restoration phase algorithm evaluate the objective function of the original problem at every trial point encountered during the restoration phase, even if this value is not required.  In this way, it is guaranteed that the original objective function can be evaluated without error at all accepted iterates; otherwise the algorithm might fail at a point where the restoration phase accepts an iterate that is good for the restoration phase problem, but not the original problem. On the other hand, if the evaluation of the original objective is expensive, this might be costly. The default value for this string option is "yes".

Possible values: yes, no
</blockquote>

\anchor OPT_resto_penalty_parameter
<strong>resto_penalty_parameter</strong> (<em>advanced</em>): Penalty parameter in the restoration phase objective function.
<blockquote>
 This is the parameter rho in equation (31a) in the Ipopt implementation paper. The valid range for this real option is 0 < resto_penalty_parameter and its default value is 1000.
</blockquote>

\anchor OPT_resto_proximity_weight
<strong>resto_proximity_weight</strong> (<em>advanced</em>): Weighting factor for the proximity term in restoration phase objective.
<blockquote>
 This determines how the parameter zeta in equation (29a) in the implementation paper is computed. zeta here is resto_proximity_weight*sqrt(mu), where mu is the current barrier parameter. The valid range for this real option is 0 &le; resto_proximity_weight and its default value is 1.
</blockquote>

\anchor OPT_bound_mult_reset_threshold
<strong>bound_mult_reset_threshold</strong>: Threshold for resetting bound multipliers after the restoration phase.
<blockquote>
 After returning from the restoration phase, the bound multipliers are updated with a Newton step for complementarity. Here, the change in the primal variables during the entire restoration phase is taken to be the corresponding primal Newton step. However, if after the update the largest bound multiplier exceeds the threshold specified by this option, the multipliers are all reset to 1. The valid range for this real option is 0 &le; bound_mult_reset_threshold and its default value is 1000.
</blockquote>

\anchor OPT_constr_mult_reset_threshold
<strong>constr_mult_reset_threshold</strong>: Threshold for resetting equality and inequality multipliers after restoration phase.
<blockquote>
 After returning from the restoration phase, the constraint multipliers are recomputed by a least square estimate. This option triggers when those least-square estimates should be ignored. The valid range for this real option is 0 &le; constr_mult_reset_threshold and its default value is 0.
</blockquote>

\anchor OPT_resto_failure_feasibility_threshold
<strong>resto_failure_feasibility_threshold</strong> (<em>advanced</em>): Threshold for primal infeasibility to declare failure of restoration phase.
<blockquote>
 If the restoration phase is terminated because of the "acceptable" termination criteria and the primal infeasibility is smaller than this value, the restoration phase is declared to have failed. The default value is actually 1e2*tol, where tol is the general termination tolerance. The valid range for this real option is 0 &le; resto_failure_feasibility_threshold and its default value is 0.
</blockquote>


\subsection OPT_Hessian_Approximation Hessian Approximation

\anchor OPT_limited_memory_aug_solver
<strong>limited_memory_aug_solver</strong> (<em>advanced</em>): Strategy for solving the augmented system for low-rank Hessian.
<blockquote>
 The default value for this string option is "sherman-morrison".

Possible values:
 - sherman-morrison: use Sherman-Morrison formula
 - extended: use an extended augmented system
</blockquote>

\anchor OPT_limited_memory_max_history
<strong>limited_memory_max_history</strong>: Maximum size of the history for the limited quasi-Newton Hessian approximation.
<blockquote>
 This option determines the number of most recent iterations that are taken into account for the limited-memory quasi-Newton approximation. The valid range for this integer option is 0 &le; limited_memory_max_history and its default value is 6.
</blockquote>

\anchor OPT_limited_memory_update_type
<strong>limited_memory_update_type</strong>: Quasi-Newton update formula for the limited memory quasi-Newton approximation.
<blockquote>
 The default value for this string option is "bfgs".

Possible values:
 - bfgs: BFGS update (with skipping)
 - sr1: SR1 (not working well)
</blockquote>

\anchor OPT_limited_memory_initialization
<strong>limited_memory_initialization</strong>: Initialization strategy for the limited memory quasi-Newton approximation.
<blockquote>
 Determines how the diagonal Matrix B_0 as the first term in the limited memory approximation should be computed. The default value for this string option is "scalar1".

Possible values:
 - scalar1: sigma = s^Ty/s^Ts
 - scalar2: sigma = y^Ty/s^Ty
 - scalar3: arithmetic average of scalar1 and scalar2
 - scalar4: geometric average of scalar1 and scalar2
 - constant: sigma = limited_memory_init_val
</blockquote>

\anchor OPT_limited_memory_init_val
<strong>limited_memory_init_val</strong>: Value for B0 in low-rank update.
<blockquote>
 The starting matrix in the low rank update, B0, is chosen to be this multiple of the identity in the first iteration (when no updates have been performed yet), and is constantly chosen as this value, if "limited_memory_initialization" is "constant". The valid range for this real option is 0 < limited_memory_init_val and its default value is 1.
</blockquote>

\anchor OPT_limited_memory_init_val_max
<strong>limited_memory_init_val_max</strong>: Upper bound on value for B0 in low-rank update.
<blockquote>
 The starting matrix in the low rank update, B0, is chosen to be this multiple of the identity in the first iteration (when no updates have been performed yet), and is constantly chosen as this value, if "limited_memory_initialization" is "constant". The valid range for this real option is 0 < limited_memory_init_val_max and its default value is 10<sup>+08</sup>.
</blockquote>

\anchor OPT_limited_memory_init_val_min
<strong>limited_memory_init_val_min</strong>: Lower bound on value for B0 in low-rank update.
<blockquote>
 The starting matrix in the low rank update, B0, is chosen to be this multiple of the identity in the first iteration (when no updates have been performed yet), and is constantly chosen as this value, if "limited_memory_initialization" is "constant". The valid range for this real option is 0 < limited_memory_init_val_min and its default value is 10<sup>-08</sup>.
</blockquote>

\anchor OPT_limited_memory_max_skipping
<strong>limited_memory_max_skipping</strong>: Threshold for successive iterations where update is skipped.
<blockquote>
 If the update is skipped more than this number of successive iterations, the quasi-Newton approximation is reset. The valid range for this integer option is 1 &le; limited_memory_max_skipping and its default value is 2.
</blockquote>

\anchor OPT_limited_memory_special_for_resto
<strong>limited_memory_special_for_resto</strong>: Determines if the quasi-Newton updates should be special during the restoration phase.
<blockquote>
 Until Nov 2010, Ipopt used a special update during the restoration phase, but it turned out that this does not work well. The new default uses the regular update procedure and it improves results. If for some reason you want to get back to the original update, set this option to "yes". The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_hessian_approximation
<strong>hessian_approximation</strong>: Indicates what Hessian information is to be used.
<blockquote>
 This determines which kind of information for the Hessian of the Lagrangian function is used by the algorithm. The default value for this string option is "exact".

Possible values:
 - exact: Use second derivatives provided by the NLP.
 - limited-memory: Perform a limited-memory quasi-Newton approximation
</blockquote>

\anchor OPT_hessian_approximation_space
<strong>hessian_approximation_space</strong> (<em>advanced</em>): Indicates in which subspace the Hessian information is to be approximated.
<blockquote>
 The default value for this string option is "nonlinear-variables".

Possible values:
 - nonlinear-variables: only in space of nonlinear variables.
 - all-variables: in space of all variables (without slacks)
</blockquote>


\subsection OPT_Derivative_Checker Derivative Checker

\anchor OPT_derivative_test
<strong>derivative_test</strong>: Enable derivative checker
<blockquote>
 If this option is enabled, a (slow!) derivative test will be performed before the optimization. The test is performed at the user provided starting point and marks derivative values that seem suspicious The default value for this string option is "none".

Possible values:
 - none: do not perform derivative test
 - first-order: perform test of first derivatives at starting point
 - second-order: perform test of first and second derivatives at starting point
 - only-second-order: perform test of second derivatives at starting point
</blockquote>

\anchor OPT_derivative_test_first_index
<strong>derivative_test_first_index</strong>: Index of first quantity to be checked by derivative checker
<blockquote>
 If this is set to -2, then all derivatives are checked. Otherwise, for the first derivative test it specifies the first variable for which the test is done (counting starts at 0). For second derivatives, it specifies the first constraint for which the test is done; counting of constraint indices starts at 0, and -1 refers to the objective function Hessian. The valid range for this integer option is -2 &le; derivative_test_first_index and its default value is -2.
</blockquote>

\anchor OPT_derivative_test_perturbation
<strong>derivative_test_perturbation</strong>: Size of the finite difference perturbation in derivative test.
<blockquote>
 This determines the relative perturbation of the variable entries. The valid range for this real option is 0 < derivative_test_perturbation and its default value is 10<sup>-08</sup>.
</blockquote>

\anchor OPT_derivative_test_tol
<strong>derivative_test_tol</strong>: Threshold for indicating wrong derivative.
<blockquote>
 If the relative deviation of the estimated derivative from the given one is larger than this value, the corresponding derivative is marked as wrong. The valid range for this real option is 0 < derivative_test_tol and its default value is 0.0001.
</blockquote>

\anchor OPT_derivative_test_print_all
<strong>derivative_test_print_all</strong>: Indicates whether information for all estimated derivatives should be printed.
<blockquote>
 Determines verbosity of derivative checker. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_point_perturbation_radius
<strong>point_perturbation_radius</strong>: Maximal perturbation of an evaluation point.
<blockquote>
 If a random perturbation of a points is required, this number indicates the maximal perturbation. This is for example used when determining the center point at which the finite difference derivative test is executed. The valid range for this real option is 0 &le; point_perturbation_radius and its default value is 10.
</blockquote>


\subsection OPT_MA27_Linear_Solver MA27 Linear Solver

\anchor OPT_ma27_print_level
<strong>ma27_print_level</strong>: Debug printing level for the linear solver MA27
<blockquote>
 0: no printing; 1: Error messages only; 2: Error and warning messages; 3: Error and warning messages and terse monitoring; 4: All information. The valid range for this integer option is 0 &le; ma27_print_level &le; 4 and its default value is 0.
</blockquote>

\anchor OPT_ma27_pivtol
<strong>ma27_pivtol</strong>: Pivot tolerance for the linear solver MA27.
<blockquote>
 A smaller number pivots for sparsity, a larger number pivots for stability. The valid range for this real option is 0 < ma27_pivtol < 1 and its default value is 10<sup>-08</sup>.
</blockquote>

\anchor OPT_ma27_pivtolmax
<strong>ma27_pivtolmax</strong>: Maximum pivot tolerance for the linear solver MA27.
<blockquote>
 Ipopt may increase pivtol as high as ma27_pivtolmax to get a more accurate solution to the linear system. The valid range for this real option is 0 < ma27_pivtolmax < 1 and its default value is 0.0001.
</blockquote>

\anchor OPT_ma27_liw_init_factor
<strong>ma27_liw_init_factor</strong>: Integer workspace memory for MA27.
<blockquote>
 The initial integer workspace memory = liw_init_factor * memory required by unfactored system. Ipopt will increase the workspace size by ma27_meminc_factor if required. The valid range for this real option is 1 &le; ma27_liw_init_factor and its default value is 5.
</blockquote>

\anchor OPT_ma27_la_init_factor
<strong>ma27_la_init_factor</strong>: Real workspace memory for MA27.
<blockquote>
 The initial real workspace memory = la_init_factor * memory required by unfactored system. Ipopt will increase the workspace size by ma27_meminc_factor if required. The valid range for this real option is 1 &le; ma27_la_init_factor and its default value is 5.
</blockquote>

\anchor OPT_ma27_meminc_factor
<strong>ma27_meminc_factor</strong>: Increment factor for workspace size for MA27.
<blockquote>
 If the integer or real workspace is not large enough, Ipopt will increase its size by this factor. The valid range for this real option is 1 &le; ma27_meminc_factor and its default value is 2.
</blockquote>

\anchor OPT_ma27_skip_inertia_check
<strong>ma27_skip_inertia_check</strong> (<em>advanced</em>): Whether to always pretend that inertia is correct.
<blockquote>
 Setting this option to "yes" essentially disables inertia check. This option makes the algorithm non-robust and easily fail, but it might give some insight into the necessity of inertia control. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_ma27_ignore_singularity
<strong>ma27_ignore_singularity</strong> (<em>advanced</em>): Whether to use MA27's ability to solve a linear system even if the matrix is singular.
<blockquote>
 Setting this option to "yes" means that Ipopt will call MA27 to compute solutions for right hand sides, even if MA27 has detected that the matrix is singular (but is still able to solve the linear system). In some cases this might be better than using Ipopt's heuristic of small perturbation of the lower diagonal of the KKT matrix. The default value for this string option is "no".

Possible values: yes, no
</blockquote>


\subsection OPT_MA57_Linear_Solver MA57 Linear Solver

\anchor OPT_ma57_print_level
<strong>ma57_print_level</strong>: Debug printing level for the linear solver MA57
<blockquote>
 0: no printing; 1: Error messages only; 2: Error and warning messages; 3: Error and warning messages and terse monitoring; >=4: All information. The valid range for this integer option is 0 &le; ma57_print_level and its default value is 0.
</blockquote>

\anchor OPT_ma57_pivtol
<strong>ma57_pivtol</strong>: Pivot tolerance for the linear solver MA57.
<blockquote>
 A smaller number pivots for sparsity, a larger number pivots for stability. The valid range for this real option is 0 < ma57_pivtol < 1 and its default value is 10<sup>-08</sup>.
</blockquote>

\anchor OPT_ma57_pivtolmax
<strong>ma57_pivtolmax</strong>: Maximum pivot tolerance for the linear solver MA57.
<blockquote>
 Ipopt may increase pivtol as high as ma57_pivtolmax to get a more accurate solution to the linear system. The valid range for this real option is 0 < ma57_pivtolmax < 1 and its default value is 0.0001.
</blockquote>

\anchor OPT_ma57_pre_alloc
<strong>ma57_pre_alloc</strong>: Safety factor for work space memory allocation for the linear solver MA57.
<blockquote>
 If 1 is chosen, the suggested amount of work space is used. However, choosing a larger number might avoid reallocation if the suggest values do not suffice. The valid range for this real option is 1 &le; ma57_pre_alloc and its default value is 1.05.
</blockquote>

\anchor OPT_ma57_pivot_order
<strong>ma57_pivot_order</strong>: Controls pivot order in MA57
<blockquote>
 This is ICNTL(6) in MA57. The valid range for this integer option is 0 &le; ma57_pivot_order &le; 5 and its default value is 5.
</blockquote>

\anchor OPT_ma57_automatic_scaling
<strong>ma57_automatic_scaling</strong>: Controls whether to enable automatic scaling in MA57
<blockquote>
 For higher reliability of the MA57 solver, you may want to set this option to yes. This is ICNTL(15) in MA57. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_ma57_block_size
<strong>ma57_block_size</strong>: Controls block size used by Level 3 BLAS in MA57BD
<blockquote>
 This is ICNTL(11) in MA57. The valid range for this integer option is 1 &le; ma57_block_size and its default value is 16.
</blockquote>

\anchor OPT_ma57_node_amalgamation
<strong>ma57_node_amalgamation</strong>: Node amalgamation parameter
<blockquote>
 This is ICNTL(12) in MA57. The valid range for this integer option is 1 &le; ma57_node_amalgamation and its default value is 16.
</blockquote>

\anchor OPT_ma57_small_pivot_flag
<strong>ma57_small_pivot_flag</strong>: Handling of small pivots
<blockquote>
 If set to 1, then when small entries defined by CNTL(2) are detected they are removed and the corresponding pivots placed at the end of the factorization. This can be particularly efficient if the matrix is highly rank deficient. This is ICNTL(16) in MA57. The valid range for this integer option is 0 &le; ma57_small_pivot_flag &le; 1 and its default value is 0.
</blockquote>


\subsection OPT_MA77_Linear_Solver MA77 Linear Solver

\anchor OPT_ma77_print_level
<strong>ma77_print_level</strong>: Debug printing level for the linear solver MA77
<blockquote>
 <0: no printing; 0: Error and warning messages only; 1: Limited diagnostic printing; >1 Additional diagnostic printing. The valid range for this integer option is unrestricted and its default value is -1.
</blockquote>

\anchor OPT_ma77_buffer_lpage
<strong>ma77_buffer_lpage</strong>: Number of scalars per MA77 in-core buffer page in the out-of-core solver MA77
<blockquote>
 Must be at most ma77_file_size. The valid range for this integer option is 1 &le; ma77_buffer_lpage and its default value is 4096.
</blockquote>

\anchor OPT_ma77_buffer_npage
<strong>ma77_buffer_npage</strong>: Number of pages that make up MA77 buffer
<blockquote>
 Number of pages of size buffer_lpage that exist in-core for the out-of-core solver MA77. The valid range for this integer option is 1 &le; ma77_buffer_npage and its default value is 1600.
</blockquote>

\anchor OPT_ma77_file_size
<strong>ma77_file_size</strong>: Target size of each temporary file for MA77, scalars per type
<blockquote>
 MA77 uses many temporary files, this option controls the size of each one. It is measured in the number of entries (int or double), NOT bytes. The valid range for this integer option is 1 &le; ma77_file_size and its default value is 2097152.
</blockquote>

\anchor OPT_ma77_maxstore
<strong>ma77_maxstore</strong>: Maximum storage size for MA77 in-core mode
<blockquote>
 If greater than zero, the maximum size of factors stored in core before out-of-core mode is invoked. The valid range for this integer option is 0 &le; ma77_maxstore and its default value is 0.
</blockquote>

\anchor OPT_ma77_nemin
<strong>ma77_nemin</strong>: Node Amalgamation parameter
<blockquote>
 Two nodes in elimination tree are merged if result has fewer than ma77_nemin variables. The valid range for this integer option is 1 &le; ma77_nemin and its default value is 8.
</blockquote>

\anchor OPT_ma77_small
<strong>ma77_small</strong>: Zero Pivot Threshold
<blockquote>
 Any pivot less than ma77_small is treated as zero. The valid range for this real option is 0 &le; ma77_small and its default value is 10<sup>-20</sup>.
</blockquote>

\anchor OPT_ma77_static
<strong>ma77_static</strong>: Static Pivoting Threshold
<blockquote>
 See MA77 documentation. Either ma77_static=0.0 or ma77_static>ma77_small. ma77_static=0.0 disables static pivoting. The valid range for this real option is 0 &le; ma77_static and its default value is 0.
</blockquote>

\anchor OPT_ma77_u
<strong>ma77_u</strong>: Pivoting Threshold
<blockquote>
 See MA77 documentation. The valid range for this real option is 0 &le; ma77_u &le; 0.5 and its default value is 10<sup>-08</sup>.
</blockquote>

\anchor OPT_ma77_umax
<strong>ma77_umax</strong>: Maximum Pivoting Threshold
<blockquote>
 Maximum value to which u will be increased to improve quality. The valid range for this real option is 0 &le; ma77_umax &le; 0.5 and its default value is 0.0001.
</blockquote>

\anchor OPT_ma77_order
<strong>ma77_order</strong>: Controls type of ordering used by MA77
<blockquote>
 The default value for this string option is "metis".

Possible values:
 - amd: Use the HSL_MC68 approximate minimum degree algorithm
 - metis: Use the MeTiS nested dissection algorithm (if available)
</blockquote>


\subsection OPT_MA86_Linear_Solver MA86 Linear Solver

\anchor OPT_ma86_print_level
<strong>ma86_print_level</strong>: Debug printing level
<blockquote>
 <0: no printing; 0: Error and warning messages only; 1: Limited diagnostic printing; >1 Additional diagnostic printing. The valid range for this integer option is unrestricted and its default value is -1.
</blockquote>

\anchor OPT_ma86_nemin
<strong>ma86_nemin</strong>: Node Amalgamation parameter
<blockquote>
 Two nodes in elimination tree are merged if result has fewer than ma86_nemin variables. The valid range for this integer option is 1 &le; ma86_nemin and its default value is 32.
</blockquote>

\anchor OPT_ma86_small
<strong>ma86_small</strong>: Zero Pivot Threshold
<blockquote>
 Any pivot less than ma86_small is treated as zero. The valid range for this real option is 0 &le; ma86_small and its default value is 10<sup>-20</sup>.
</blockquote>

\anchor OPT_ma86_static
<strong>ma86_static</strong>: Static Pivoting Threshold
<blockquote>
 See MA86 documentation. Either ma86_static=0.0 or ma86_static>ma86_small. ma86_static=0.0 disables static pivoting. The valid range for this real option is 0 &le; ma86_static and its default value is 0.
</blockquote>

\anchor OPT_ma86_u
<strong>ma86_u</strong>: Pivoting Threshold
<blockquote>
 See MA86 documentation. The valid range for this real option is 0 &le; ma86_u &le; 0.5 and its default value is 10<sup>-08</sup>.
</blockquote>

\anchor OPT_ma86_umax
<strong>ma86_umax</strong>: Maximum Pivoting Threshold
<blockquote>
 Maximum value to which u will be increased to improve quality. The valid range for this real option is 0 &le; ma86_umax &le; 0.5 and its default value is 0.0001.
</blockquote>

\anchor OPT_ma86_scaling
<strong>ma86_scaling</strong>: Controls scaling of matrix
<blockquote>
 The default value for this string option is "mc64".

Possible values:
 - none: Do not scale the linear system matrix
 - mc64: Scale linear system matrix using MC64
 - mc77: Scale linear system matrix using MC77 [1,3,0]
</blockquote>

\anchor OPT_ma86_order
<strong>ma86_order</strong>: Controls type of ordering
<blockquote>
 The default value for this string option is "auto".

Possible values:
 - auto: Try both AMD and MeTiS, pick best
 - amd: Use the HSL_MC68 approximate minimum degree algorithm
 - metis: Use the MeTiS nested dissection algorithm (if available)
</blockquote>


\subsection OPT_MA97_Linear_Solver MA97 Linear Solver

\anchor OPT_ma97_print_level
<strong>ma97_print_level</strong>: Debug printing level
<blockquote>
 <0: no printing; 0: Error and warning messages only; 1: Limited diagnostic printing; >1 Additional diagnostic printing. The valid range for this integer option is unrestricted and its default value is -1.
</blockquote>

\anchor OPT_ma97_nemin
<strong>ma97_nemin</strong>: Node Amalgamation parameter
<blockquote>
 Two nodes in elimination tree are merged if result has fewer than ma97_nemin variables. The valid range for this integer option is 1 &le; ma97_nemin and its default value is 8.
</blockquote>

\anchor OPT_ma97_small
<strong>ma97_small</strong>: Zero Pivot Threshold
<blockquote>
 Any pivot less than ma97_small is treated as zero. The valid range for this real option is 0 &le; ma97_small and its default value is 10<sup>-20</sup>.
</blockquote>

\anchor OPT_ma97_u
<strong>ma97_u</strong>: Pivoting Threshold
<blockquote>
 See MA97 documentation. The valid range for this real option is 0 &le; ma97_u &le; 0.5 and its default value is 10<sup>-08</sup>.
</blockquote>

\anchor OPT_ma97_umax
<strong>ma97_umax</strong>: Maximum Pivoting Threshold
<blockquote>
 See MA97 documentation. The valid range for this real option is 0 &le; ma97_umax &le; 0.5 and its default value is 0.0001.
</blockquote>

\anchor OPT_ma97_scaling
<strong>ma97_scaling</strong>: Specifies strategy for scaling
<blockquote>
 The default value for this string option is "dynamic".

Possible values:
 - none: Do not scale the linear system matrix
 - mc30: Scale all linear system matrices using MC30
 - mc64: Scale all linear system matrices using MC64
 - mc77: Scale all linear system matrices using MC77 [1,3,0]
 - dynamic: Dynamically select scaling according to rules specified by ma97_scalingX and ma97_switchX options.
</blockquote>

\anchor OPT_ma97_scaling1
<strong>ma97_scaling1</strong> (<em>advanced</em>): First scaling.
<blockquote>
 If ma97_scaling=dynamic, this scaling is used according to the trigger ma97_switch1. If ma97_switch2 is triggered it is disabled. The default value for this string option is "mc64".

Possible values:
 - none: No scaling
 - mc30: Scale linear system matrix using MC30
 - mc64: Scale linear system matrix using MC64
 - mc77: Scale linear system matrix using MC77 [1,3,0]
</blockquote>

\anchor OPT_ma97_switch1
<strong>ma97_switch1</strong> (<em>advanced</em>): First switch, determine when ma97_scaling1 is enabled.
<blockquote>
 If ma97_scaling=dynamic, ma97_scaling1 is enabled according to this condition. If ma97_switch2 occurs this option is henceforth ignored. The default value for this string option is "od_hd_reuse".

Possible values:
 - never: Scaling is never enabled.
 - at_start: Scaling to be used from the very start.
 - at_start_reuse: Scaling to be used on first iteration, then reused thereafter.
 - on_demand: Scaling to be used after Ipopt request improved solution (i.e. iterative refinement has failed).
 - on_demand_reuse: As on_demand, but reuse scaling from previous itr
 - high_delay: Scaling to be used after more than 0.05*n delays are present
 - high_delay_reuse: Scaling to be used only when previous itr created more that 0.05*n additional delays, otherwise reuse scaling from previous itr
 - od_hd: Combination of on_demand and high_delay
 - od_hd_reuse: Combination of on_demand_reuse and high_delay_reuse
</blockquote>

\anchor OPT_ma97_scaling2
<strong>ma97_scaling2</strong> (<em>advanced</em>): Second scaling.
<blockquote>
 If ma97_scaling=dynamic, this scaling is used according to the trigger ma97_switch2. If ma97_switch3 is triggered it is disabled. The default value for this string option is "mc64".

Possible values:
 - none: No scaling
 - mc30: Scale linear system matrix using MC30
 - mc64: Scale linear system matrix using MC64
 - mc77: Scale linear system matrix using MC77 [1,3,0]
</blockquote>

\anchor OPT_ma97_switch2
<strong>ma97_switch2</strong> (<em>advanced</em>): Second switch, determine when ma97_scaling2 is enabled.
<blockquote>
 If ma97_scaling=dynamic, ma97_scaling2 is enabled according to this condition. If ma97_switch3 occurs this option is henceforth ignored. The default value for this string option is "never".

Possible values:
 - never: Scaling is never enabled.
 - at_start: Scaling to be used from the very start.
 - at_start_reuse: Scaling to be used on first iteration, then reused thereafter.
 - on_demand: Scaling to be used after Ipopt request improved solution (i.e. iterative refinement has failed).
 - on_demand_reuse: As on_demand, but reuse scaling from previous itr
 - high_delay: Scaling to be used after more than 0.05*n delays are present
 - high_delay_reuse: Scaling to be used only when previous itr created more that 0.05*n additional delays, otherwise reuse scaling from previous itr
 - od_hd: Combination of on_demand and high_delay
 - od_hd_reuse: Combination of on_demand_reuse and high_delay_reuse
</blockquote>

\anchor OPT_ma97_scaling3
<strong>ma97_scaling3</strong> (<em>advanced</em>): Third scaling.
<blockquote>
 If ma97_scaling=dynamic, this scaling is used according to the trigger ma97_switch3. The default value for this string option is "mc64".

Possible values:
 - none: No scaling
 - mc30: Scale linear system matrix using MC30
 - mc64: Scale linear system matrix using MC64
 - mc77: Scale linear system matrix using MC77 [1,3,0]
</blockquote>

\anchor OPT_ma97_switch3
<strong>ma97_switch3</strong> (<em>advanced</em>): Third switch, determine when ma97_scaling3 is enabled.
<blockquote>
 If ma97_scaling=dynamic, ma97_scaling3 is enabled according to this condition. The default value for this string option is "never".

Possible values:
 - never: Scaling is never enabled.
 - at_start: Scaling to be used from the very start.
 - at_start_reuse: Scaling to be used on first iteration, then reused thereafter.
 - on_demand: Scaling to be used after Ipopt request improved solution (i.e. iterative refinement has failed).
 - on_demand_reuse: As on_demand, but reuse scaling from previous itr
 - high_delay: Scaling to be used after more than 0.05*n delays are present
 - high_delay_reuse: Scaling to be used only when previous itr created more that 0.05*n additional delays, otherwise reuse scaling from previous itr
 - od_hd: Combination of on_demand and high_delay
 - od_hd_reuse: Combination of on_demand_reuse and high_delay_reuse
</blockquote>

\anchor OPT_ma97_order
<strong>ma97_order</strong>: Controls type of ordering
<blockquote>
 The default value for this string option is "auto".

Possible values:
 - auto: Use HSL_MA97 heuristic to guess best of AMD and METIS
 - best: Try both AMD and MeTiS, pick best
 - amd: Use the HSL_MC68 approximate minimum degree algorithm
 - metis: Use the MeTiS nested dissection algorithm
 - matched-auto: Use the HSL_MC80 matching with heuristic choice of AMD or METIS
 - matched-metis: Use the HSL_MC80 matching based ordering with METIS
 - matched-amd: Use the HSL_MC80 matching based ordering with AMD
</blockquote>

\anchor OPT_ma97_solve_blas3
<strong>ma97_solve_blas3</strong> (<em>advanced</em>): Controls if blas2 or blas3 routines are used for solve
<blockquote>
 The default value for this string option is "no".

Possible values:
 - no: Use BLAS2 (faster, some implementations bit incompatible)
 - yes: Use BLAS3 (slower)
</blockquote>


\subsection OPT_Pardiso__pardiso_project_org__Linear_Solver Pardiso (pardiso-project.org) Linear Solver

\anchor OPT_pardiso_matching_strategy
<strong>pardiso_matching_strategy</strong>: Matching strategy to be used by Pardiso
<blockquote>
 This is IPAR(13) in Pardiso manual. The default value for this string option is "complete+2x2".

Possible values:
 - complete: Match complete (IPAR(13)=1)
 - complete+2x2: Match complete+2x2 (IPAR(13)=2)
 - constraints: Match constraints (IPAR(13)=3)
</blockquote>

\anchor OPT_pardiso_redo_symbolic_fact_only_if_inertia_wrong
<strong>pardiso_redo_symbolic_fact_only_if_inertia_wrong</strong> (<em>advanced</em>): Toggle for handling case when elements were perturbed by Pardiso.
<blockquote>
 The default value for this string option is "no".

Possible values:
 - no: Always redo symbolic factorization when elements were perturbed
 - yes: Only redo symbolic factorization when elements were perturbed if also the inertia was wrong
</blockquote>

\anchor OPT_pardiso_repeated_perturbation_means_singular
<strong>pardiso_repeated_perturbation_means_singular</strong> (<em>advanced</em>): Whether to assume that matrix is singular if elements were perturbed after recent symbolic factorization.
<blockquote>
 The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_pardiso_msglvl
<strong>pardiso_msglvl</strong>: Pardiso message level
<blockquote>
 This is MSGLVL in the Pardiso manual. The valid range for this integer option is 0 &le; pardiso_msglvl and its default value is 0.
</blockquote>

\anchor OPT_pardiso_skip_inertia_check
<strong>pardiso_skip_inertia_check</strong> (<em>advanced</em>): Whether to pretend that inertia is correct.
<blockquote>
 Setting this option to "yes" essentially disables inertia check. This option makes the algorithm non-robust and easily fail, but it might give some insight into the necessity of inertia control. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_pardiso_max_iterative_refinement_steps
<strong>pardiso_max_iterative_refinement_steps</strong>: Limit on number of iterative refinement steps.
<blockquote>
 The solver does not perform more than the absolute value of this value steps of iterative refinement and stops the process if a satisfactory level of accuracy of the solution in terms of backward error is achieved. If negative, the accumulation of the residue uses extended precision real and complex data types. Perturbed pivots result in iterative refinement. The solver automatically performs two steps of iterative refinements when perturbed pivots are obtained during the numerical factorization and this option is set to 0. The valid range for this integer option is unrestricted and its default value is 0.
</blockquote>

\anchor OPT_pardiso_order
<strong>pardiso_order</strong>: Controls the fill-in reduction ordering algorithm for the input matrix.
<blockquote>
 The default value for this string option is "metis".

Possible values:
 - amd: minimum degree algorithm
 - one
 - metis: MeTiS nested dissection algorithm
 - pmetis: parallel (OpenMP) version of MeTiS nested dissection algorithm
 - four
 - five
</blockquote>

\anchor OPT_pardiso_max_iter
<strong>pardiso_max_iter</strong> (<em>advanced</em>): Maximum number of Krylov-Subspace Iteration
<blockquote>
 DPARM(1) The valid range for this integer option is 1 &le; pardiso_max_iter and its default value is 500.
</blockquote>

\anchor OPT_pardiso_iter_relative_tol
<strong>pardiso_iter_relative_tol</strong> (<em>advanced</em>): Relative Residual Convergence
<blockquote>
 DPARM(2) The valid range for this real option is 0 < pardiso_iter_relative_tol < 1 and its default value is 10<sup>-06</sup>.
</blockquote>

\anchor OPT_pardiso_iter_coarse_size
<strong>pardiso_iter_coarse_size</strong> (<em>advanced</em>): Maximum Size of Coarse Grid Matrix
<blockquote>
 DPARM(3) The valid range for this integer option is 1 &le; pardiso_iter_coarse_size and its default value is 5000.
</blockquote>

\anchor OPT_pardiso_iter_max_levels
<strong>pardiso_iter_max_levels</strong> (<em>advanced</em>): Maximum Size of Grid Levels
<blockquote>
 DPARM(4) The valid range for this integer option is 1 &le; pardiso_iter_max_levels and its default value is 10.
</blockquote>

\anchor OPT_pardiso_iter_dropping_factor
<strong>pardiso_iter_dropping_factor</strong> (<em>advanced</em>): dropping value for incomplete factor
<blockquote>
 DPARM(5) The valid range for this real option is 0 < pardiso_iter_dropping_factor < 1 and its default value is 0.5.
</blockquote>

\anchor OPT_pardiso_iter_dropping_schur
<strong>pardiso_iter_dropping_schur</strong> (<em>advanced</em>): dropping value for sparsify schur complement factor
<blockquote>
 DPARM(6) The valid range for this real option is 0 < pardiso_iter_dropping_schur < 1 and its default value is 0.1.
</blockquote>

\anchor OPT_pardiso_iter_max_row_fill
<strong>pardiso_iter_max_row_fill</strong> (<em>advanced</em>): max fill for each row
<blockquote>
 DPARM(7) The valid range for this integer option is 1 &le; pardiso_iter_max_row_fill and its default value is 10000000.
</blockquote>

\anchor OPT_pardiso_iter_inverse_norm_factor
<strong>pardiso_iter_inverse_norm_factor</strong> (<em>advanced</em>)
<blockquote>
 DPARM(8) The valid range for this real option is 1 < pardiso_iter_inverse_norm_factor and its default value is 5 &middot; 10<sup>+06</sup>.
</blockquote>

\anchor OPT_pardiso_iterative
<strong>pardiso_iterative</strong> (<em>advanced</em>): Switch for iterative solver in Pardiso library
<blockquote>
 The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_pardiso_max_droptol_corrections
<strong>pardiso_max_droptol_corrections</strong> (<em>advanced</em>): Maximal number of decreases of drop tolerance during one solve.
<blockquote>
 This is relevant only for iterative Pardiso options. The valid range for this integer option is 1 &le; pardiso_max_droptol_corrections and its default value is 4.
</blockquote>


\subsection OPT_Pardiso__MKL__Linear_Solver Pardiso (MKL) Linear Solver

\anchor OPT_pardisomkl_matching_strategy
<strong>pardisomkl_matching_strategy</strong>: Matching strategy to be used by Pardiso
<blockquote>
 This is IPAR(13) in Pardiso manual. The default value for this string option is "complete+2x2".

Possible values:
 - complete: Match complete (IPAR(13)=1)
 - complete+2x2: Match complete+2x2 (IPAR(13)=2)
 - constraints: Match constraints (IPAR(13)=3)
</blockquote>

\anchor OPT_pardisomkl_redo_symbolic_fact_only_if_inertia_wrong
<strong>pardisomkl_redo_symbolic_fact_only_if_inertia_wrong</strong> (<em>advanced</em>): Toggle for handling case when elements were perturbed by Pardiso.
<blockquote>
 The default value for this string option is "no".

Possible values:
 - no: Always redo symbolic factorization when elements were perturbed
 - yes: Only redo symbolic factorization when elements were perturbed if also the inertia was wrong
</blockquote>

\anchor OPT_pardisomkl_repeated_perturbation_means_singular
<strong>pardisomkl_repeated_perturbation_means_singular</strong> (<em>advanced</em>): Whether to assume that matrix is singular if elements were perturbed after recent symbolic factorization.
<blockquote>
 The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_pardisomkl_msglvl
<strong>pardisomkl_msglvl</strong>: Pardiso message level
<blockquote>
 This is MSGLVL in the Pardiso manual. The valid range for this integer option is 0 &le; pardisomkl_msglvl and its default value is 0.
</blockquote>

\anchor OPT_pardisomkl_skip_inertia_check
<strong>pardisomkl_skip_inertia_check</strong> (<em>advanced</em>): Whether to pretend that inertia is correct.
<blockquote>
 Setting this option to "yes" essentially disables inertia check. This option makes the algorithm non-robust and easily fail, but it might give some insight into the necessity of inertia control. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_pardisomkl_max_iterative_refinement_steps
<strong>pardisomkl_max_iterative_refinement_steps</strong>: Limit on number of iterative refinement steps.
<blockquote>
 The solver does not perform more than the absolute value of this value steps of iterative refinement and stops the process if a satisfactory level of accuracy of the solution in terms of backward error is achieved. If negative, the accumulation of the residue uses extended precision real and complex data types. Perturbed pivots result in iterative refinement. The solver automatically performs two steps of iterative refinements when perturbed pivots are obtained during the numerical factorization and this option is set to 0. The valid range for this integer option is unrestricted and its default value is 1.
</blockquote>

\anchor OPT_pardisomkl_order
<strong>pardisomkl_order</strong>: Controls the fill-in reduction ordering algorithm for the input matrix.
<blockquote>
 The default value for this string option is "metis".

Possible values:
 - amd: minimum degree algorithm
 - one: undocumented
 - metis: MeTiS nested dissection algorithm
 - pmetis: parallel (OpenMP) version of MeTiS nested dissection algorithm
</blockquote>


\subsection OPT_SPRAL_Linear_Solver SPRAL Linear Solver

\anchor OPT_spral_cpu_block_size
<strong>spral_cpu_block_size</strong>: CPU Parallelization Block Size
<blockquote>
 Block size to use for parallelization of large nodes on CPU resources. The valid range for this integer option is 1 &le; spral_cpu_block_size and its default value is 256.
</blockquote>

\anchor OPT_spral_gpu_perf_coeff
<strong>spral_gpu_perf_coeff</strong>: GPU Performance Coefficient
<blockquote>
 How many times faster a GPU is than a CPU at factoring a subtree. The valid range for this real option is 0 < spral_gpu_perf_coeff and its default value is 1.
</blockquote>

\anchor OPT_spral_ignore_numa
<strong>spral_ignore_numa</strong>: Non-uniform memory access (NUMA) region setting.
<blockquote>
 The default value for this string option is "yes".

Possible values:
 - no: Do not treat CPUs and GPUs as belonging to a single NUMA region.
 - yes: Treat CPUs and GPUs as belonging to a single NUMA region.
</blockquote>

\anchor OPT_spral_max_load_inbalance
<strong>spral_max_load_inbalance</strong>: Maximum Permissible Load
<blockquote>
 Maximum permissible load inbalance for leaf subtree allocations. The valid range for this real option is 1 < spral_max_load_inbalance and its default value is 1.2.
</blockquote>

\anchor OPT_spral_min_gpu_work
<strong>spral_min_gpu_work</strong>: Minimum GPU Work
<blockquote>
 Minimum number of FLOPS in subtree before scheduling on GPU. The valid range for this real option is 0 &le; spral_min_gpu_work and its default value is 5 &middot; 10<sup>+09</sup>.
</blockquote>

\anchor OPT_spral_nemin
<strong>spral_nemin</strong>: Node Amalgamation Parameter
<blockquote>
 Two nodes in the elimination tree are merged if the result has fewer than spral_nemin variables. The valid range for this integer option is 1 &le; spral_nemin and its default value is 32.
</blockquote>

\anchor OPT_spral_order
<strong>spral_order</strong>: Controls type of ordering used by SPRAL
<blockquote>
 The default value for this string option is "matching".

Possible values:
 - metis: Use METIS with default settings.
 - matching: Use matching-based elimination ordering.
</blockquote>

\anchor OPT_spral_pivot_method
<strong>spral_pivot_method</strong>: Specifies strategy for scaling in SPRAL linear solver.
<blockquote>
 The default value for this string option is "block".

Possible values:
 - aggressive: Aggressive a posteori pivoting.
 - block: Block a posteori pivoting.
 - threshold: Threshold partial pivoting (not parallel).
</blockquote>

\anchor OPT_spral_print_level
<strong>spral_print_level</strong>: Print level for the linear solver SPRAL
<blockquote>
 <0: no printing, 0: errors and warning messages, 1: limited diagnostics, >1: additional diagnostics The valid range for this integer option is unrestricted and its default value is -1.
</blockquote>

\anchor OPT_spral_scaling
<strong>spral_scaling</strong>: Specifies strategy for scaling in SPRAL linear solver.
<blockquote>
 The default value for this string option is "matching".

Possible values:
 - none: Do not scale the linear system matrix.
 - mc64: Scale using weighted bipartite matching (MC64).
 - auction: Scale using the auction algorithm.
 - matching: Scale using the matching-based ordering.
 - ruiz: Scale using the norm-equilibration algorithm of Ruiz (MC77).
 - dynamic: Dynamically select scaling according to switch options.
</blockquote>

\anchor OPT_spral_scaling_1
<strong>spral_scaling_1</strong> (<em>advanced</em>): First scaling strategy.
<blockquote>
 If spral_scaling = dynamic, this scaling is used according to the trigger spral_switch_1. If spral_switch_2 is triggered, it is disabled. The default value for this string option is "matching".

Possible values:
 - none: Do not scale the linear system matrix.
 - mc64: Scale using weighted bipartite matching (MC64).
 - auction: Scale using the auction algorithm.
 - matching: Scale using the matching-based ordering.
 - ruiz: Scale using the norm-equilibration algorithm of Ruiz (MC77).
</blockquote>

\anchor OPT_spral_scaling_2
<strong>spral_scaling_2</strong> (<em>advanced</em>): Second scaling strategy.
<blockquote>
 If spral_scaling = dynamic, this scaling is used according to the trigger spral_switch_2. If spral_switch_3 is triggered, it is disabled. The default value for this string option is "mc64".

Possible values:
 - none: Do not scale the linear system matrix.
 - mc64: Scale using weighted bipartite matching (MC64).
 - auction: Scale using the auction algorithm.
 - matching: Scale using the matching-based ordering.
 - ruiz: Scale using the norm-equilibration algorithm of Ruiz (MC77).
</blockquote>

\anchor OPT_spral_scaling_3
<strong>spral_scaling_3</strong> (<em>advanced</em>): Third scaling strategy.
<blockquote>
 If spral_scaling = dynamic, this scaling is used according to the trigger spral_switch_3. The default value for this string option is "none".

Possible values:
 - none: Do not scale the linear system matrix.
 - mc64: Scale using weighted bipartite matching (MC64).
 - auction: Scale using the auction algorithm.
 - matching: Scale using the matching-based ordering.
 - ruiz: Scale using the norm-equilibration algorithm of Ruiz (MC77).
</blockquote>

\anchor OPT_spral_switch_1
<strong>spral_switch_1</strong> (<em>advanced</em>): First switch, determining when spral_scaling_1 is enabled.
<blockquote>
 If spral_scaling = dynamic, spral_scaling_1 is enabled according to this condition. If spral_switch_2 occurs, this option is henceforth ignored. The default value for this string option is "at_start".

Possible values:
 - never: Scaling is never enabled.
 - at_start: Scaling is used from the very start.
 - at_start_reuse: Scaling is used on the first iteration, then reused thereafter.
 - on_demand: Scaling is used when iterative refinement has failed.
 - on_demand_reuse: As on_demand, but scaling from previous iteration is reused.
 - high_delay: Scaling is used after more than 0.05*n delays are present.
 - high_delay_reuse: Scaling is used only when previous iteration created more that 0.05*n additional delays; otherwise, reuse scaling from the previous iteration.
 - od_hd: Combination of on_demand and high_delay.
 - od_hd_reuse: Combination of on_demand_reuse and high_delay_reuse
</blockquote>

\anchor OPT_spral_switch_2
<strong>spral_switch_2</strong> (<em>advanced</em>): Second switch, determining when spral_scaling_2 is enabled.
<blockquote>
 If spral_scaling = dynamic, spral_scaling_2 is enabled according to this condition. If spral_switch_3 occurs, this option is henceforth ignored. The default value for this string option is "on_demand".

Possible values:
 - never: Scaling is never enabled.
 - at_start: Scaling is used from the very start.
 - at_start_reuse: Scaling is used on the first iteration, then reused thereafter.
 - on_demand: Scaling is used when iterative refinement has failed.
 - on_demand_reuse: As on_demand, but scaling from previous iteration is reused.
 - high_delay: Scaling is used after more than 0.05*n delays are present.
 - high_delay_reuse: Scaling is used only when previous iteration created more that 0.05*n additional delays; otherwise, reuse scaling from the previous iteration.
 - od_hd: Combination of on_demand and high_delay.
 - od_hd_reuse: Combination of on_demand_reuse and high_delay_reuse
</blockquote>

\anchor OPT_spral_switch_3
<strong>spral_switch_3</strong> (<em>advanced</em>): Third switch, determining when spral_scaling_3 is enabled.
<blockquote>
 If spral_scaling = dynamic, spral_scaling_3 is enabled according to this condition. The default value for this string option is "never".

Possible values:
 - never: Scaling is never enabled.
 - at_start: Scaling is used from the very start.
 - at_start_reuse: Scaling is used on the first iteration, then reused thereafter.
 - on_demand: Scaling is used when iterative refinement has failed.
 - on_demand_reuse: As on_demand, but scaling from previous iteration is reused.
 - high_delay: Scaling is used after more than 0.05*n delays are present.
 - high_delay_reuse: Scaling is used only when previous iteration created more that 0.05*n additional delays; otherwise, reuse scaling from the previous iteration.
 - od_hd: Combination of on_demand and high_delay.
 - od_hd_reuse: Combination of on_demand_reuse and high_delay_reuse
</blockquote>

\anchor OPT_spral_small
<strong>spral_small</strong>: Zero Pivot Threshold
<blockquote>
 Any pivot less than spral_small is treated as zero. The valid range for this real option is 0 < spral_small and its default value is 10<sup>-20</sup>.
</blockquote>

\anchor OPT_spral_small_subtree_threshold
<strong>spral_small_subtree_threshold</strong>: Small Subtree Threshold
<blockquote>
 Maximum number of FLOPS in a subtree treated as a single task. The valid range for this real option is 0 < spral_small_subtree_threshold and its default value is 4 &middot; 10<sup>+06</sup>.
</blockquote>

\anchor OPT_spral_u
<strong>spral_u</strong>: Pivoting Threshold
<blockquote>
 Relative pivot threshold used in symmetric indefinite case. The valid range for this real option is 0 < spral_u &le; 0.5 and its default value is 10<sup>-08</sup>.
</blockquote>

\anchor OPT_spral_umax
<strong>spral_umax</strong>: Maximum Pivoting Threshold
<blockquote>
 See SPRAL documentation. The valid range for this real option is 0 < spral_umax &le; 0.5 and its default value is 0.0001.
</blockquote>

\anchor OPT_spral_use_gpu
<strong>spral_use_gpu</strong>: Specifies whether or not graphics processing units (GPUs) are used by the SPRAL linear solver if present.
<blockquote>
 The default value for this string option is "yes".

Possible values: yes, no
</blockquote>


\subsection OPT_WSMP_Linear_Solver WSMP Linear Solver

\anchor OPT_wsmp_num_threads
<strong>wsmp_num_threads</strong>: Number of threads to be used in WSMP
<blockquote>
 The valid range for this integer option is unrestricted and its default value is 1.
</blockquote>

\anchor OPT_wsmp_ordering_option
<strong>wsmp_ordering_option</strong>: Determines how ordering is done in WSMP
<blockquote>
 This corresponds to the value of WSSMP's IPARM(16). The valid range for this integer option is -2 &le; wsmp_ordering_option &le; 3 and its default value is 1.
</blockquote>

\anchor OPT_wsmp_ordering_option2
<strong>wsmp_ordering_option2</strong> (<em>advanced</em>): Determines how ordering is done in WSMP
<blockquote>
 This corresponds to the value of WSSMP's IPARM(20). The valid range for this integer option is 0 &le; wsmp_ordering_option2 &le; 3 and its default value is 1.
</blockquote>

\anchor OPT_wsmp_pivtol
<strong>wsmp_pivtol</strong>: Pivot tolerance for the linear solver WSMP.
<blockquote>
 A smaller number pivots for sparsity, a larger number pivots for stability. The valid range for this real option is 0 < wsmp_pivtol < 1 and its default value is 0.0001.
</blockquote>

\anchor OPT_wsmp_pivtolmax
<strong>wsmp_pivtolmax</strong>: Maximum pivot tolerance for the linear solver WSMP.
<blockquote>
 Ipopt may increase pivtol as high as pivtolmax to get a more accurate solution to the linear system. The valid range for this real option is 0 < wsmp_pivtolmax < 1 and its default value is 0.1.
</blockquote>

\anchor OPT_wsmp_scaling
<strong>wsmp_scaling</strong>: Determines how the matrix is scaled by WSMP.
<blockquote>
 This corresponds to the value of WSSMP's IPARM(10). The valid range for this integer option is 0 &le; wsmp_scaling &le; 3 and its default value is 0.
</blockquote>

\anchor OPT_wsmp_singularity_threshold
<strong>wsmp_singularity_threshold</strong>: WSMP's singularity threshold.
<blockquote>
 WSMP's DPARM(10) parameter. The smaller this value the less likely a matrix is declared singular. The valid range for this real option is 0 < wsmp_singularity_threshold < 1 and its default value is 10<sup>-18</sup>.
</blockquote>

\anchor OPT_wsmp_write_matrix_iteration
<strong>wsmp_write_matrix_iteration</strong> (<em>advanced</em>): Iteration in which the matrices are written to files.
<blockquote>
 If non-negative, this option determines the iteration in which all matrices given to WSMP are written to files. The valid range for this integer option is -1 &le; wsmp_write_matrix_iteration and its default value is -1.
</blockquote>

\anchor OPT_wsmp_skip_inertia_check
<strong>wsmp_skip_inertia_check</strong> (<em>advanced</em>): Whether to always pretend that inertia is correct.
<blockquote>
 Setting this option to "yes" essentially disables inertia check. This option makes the algorithm non-robust and easily fail, but it might give some insight into the necessity of inertia control. The default value for this string option is "no".

Possible values: yes, no
</blockquote>

\anchor OPT_wsmp_no_pivoting
<strong>wsmp_no_pivoting</strong> (<em>advanced</em>): Whether to use the static pivoting option of WSMP.
<blockquote>
 Setting this option to "yes" means that WSMP is instructed not to do pivoting. This works only in certain situations (when the Hessian block is known to be positive definite or when we are using L-BFGS). It can also lead to a lot of fill-in. The default value for this string option is "no".

Possible values:
 - no: use the regular version
 - yes: use static pivoting
</blockquote>

\anchor OPT_wsmp_max_iter
<strong>wsmp_max_iter</strong> (<em>advanced</em>): Maximal number of iterations in iterative WISMP
<blockquote>
 The valid range for this integer option is 1 &le; wsmp_max_iter and its default value is 1000.
</blockquote>

\anchor OPT_wsmp_inexact_droptol
<strong>wsmp_inexact_droptol</strong> (<em>advanced</em>): Drop tolerance for inexact factorization preconditioner in WISMP.
<blockquote>
 DPARM(14) in WISMP The valid range for this real option is 0 &le; wsmp_inexact_droptol and its default value is 0.
</blockquote>

\anchor OPT_wsmp_inexact_fillin_limit
<strong>wsmp_inexact_fillin_limit</strong> (<em>advanced</em>): Fill-in limit for inexact factorization preconditioner in WISMP.
<blockquote>
 DPARM(15) in WISMP The valid range for this real option is 0 &le; wsmp_inexact_fillin_limit and its default value is 0.
</blockquote>


\subsection OPT_Mumps_Linear_Solver Mumps Linear Solver

\anchor OPT_mumps_print_level
<strong>mumps_print_level</strong>: Debug printing level for the linear solver MUMPS
<blockquote>
 0: no printing; 1: Error messages only; 2: Error, warning, and main statistic messages; 3: Error and warning messages and terse diagnostics; >=4: All information. The valid range for this integer option is 0 &le; mumps_print_level and its default value is 0.
</blockquote>

\anchor OPT_mumps_pivtol
<strong>mumps_pivtol</strong>: Pivot tolerance for the linear solver MUMPS.
<blockquote>
 A smaller number pivots for sparsity, a larger number pivots for stability. The valid range for this real option is 0 &le; mumps_pivtol &le; 1 and its default value is 10<sup>-06</sup>.
</blockquote>

\anchor OPT_mumps_pivtolmax
<strong>mumps_pivtolmax</strong>: Maximum pivot tolerance for the linear solver MUMPS.
<blockquote>
 Ipopt may increase pivtol as high as pivtolmax to get a more accurate solution to the linear system. The valid range for this real option is 0 &le; mumps_pivtolmax &le; 1 and its default value is 0.1.
</blockquote>

\anchor OPT_mumps_mem_percent
<strong>mumps_mem_percent</strong>: Percentage increase in the estimated working space for MUMPS.
<blockquote>
 When significant extra fill-in is caused by numerical pivoting, larger values of mumps_mem_percent may help use the workspace more efficiently. On the other hand, if memory requirement are too large at the very beginning of the optimization, choosing a much smaller value for this option, such as 5, might reduce memory requirements. The valid range for this integer option is 0 &le; mumps_mem_percent and its default value is 1000.
</blockquote>

\anchor OPT_mumps_permuting_scaling
<strong>mumps_permuting_scaling</strong>: Controls permuting and scaling in MUMPS
<blockquote>
 This is ICNTL(6) in MUMPS. The valid range for this integer option is 0 &le; mumps_permuting_scaling &le; 7 and its default value is 7.
</blockquote>

\anchor OPT_mumps_pivot_order
<strong>mumps_pivot_order</strong>: Controls pivot order in MUMPS
<blockquote>
 This is ICNTL(7) in MUMPS. The valid range for this integer option is 0 &le; mumps_pivot_order &le; 7 and its default value is 7.
</blockquote>

\anchor OPT_mumps_scaling
<strong>mumps_scaling</strong>: Controls scaling in MUMPS
<blockquote>
 This is ICNTL(8) in MUMPS. The valid range for this integer option is -2 &le; mumps_scaling &le; 77 and its default value is 77.
</blockquote>

\anchor OPT_mumps_dep_tol
<strong>mumps_dep_tol</strong> (<em>advanced</em>): Threshold to consider a pivot at zero in detection of linearly dependent constraints with MUMPS.
<blockquote>
 This is CNTL(3) in MUMPS. The valid range for this real option is unrestricted and its default value is 0.
</blockquote>


\subsection OPT_MA28_Linear_Solver MA28 Linear Solver

\anchor OPT_ma28_pivtol
<strong>ma28_pivtol</strong>: Pivot tolerance for linear solver MA28.
<blockquote>
 The valid range for this real option is 0 < ma28_pivtol &le; 1 and its default value is 0.01.
</blockquote>


*/
